Microsoft (R) Macro Assembler (x64) Version 14.44.35214.0   08/20/25 23:44:52
ui512md.asm						     Page 1 - 1


				;
				;			ui512md
				;
				;--------------------------------------------------------------------------------------------------------------------------------------------------------------
				;
				;			File:			ui512md.asm
				;			Author:			John G. Lynch
				;			Legal:			Copyright @2024, per MIT License below
				;			Date:			June 20, 2024
				;


								INCLUDE			legalnotes.inc
			      C 
			      C IFNDEF		legalnotes
 = 00000001		      C legalnotes	EQU		1
			      C .LIST
			      C ;			legalnotes
			      C ;
			      C ;			File:			legalnotes.inc
			      C ;			Author:			John G. Lynch
			      C ;			Legal:			Copyright @2024, per MIT License below
			      C ;			Date:			August 20, 2025
			      C ;
			      C ;
			      C ;			Notes:
			      C ;				ui512 is a small project to provide basic operations for a variable type of unsigned 512 bit integer.
			      C ;
			      C ;				ui512a provides basic operations: zero, copy, compare, add, subtract.
			      C ;				ui512b provides basic bit-oriented operations: shift left, shift right, and, or, not, least significant bit and most significant bit.
			      C ;               ui512md provides multiply and divide.
			      C ;
			      C ;				It is written in assembly language, using the MASM (ml64) assembler provided as an option within Visual Studio.
			      C ;				(currently using VS Community 2022 17.14.10)
			      C ;
			      C ;				It provides external signatures that allow linkage to C and C++ programs,
			      C ;				where a shell/wrapper could encapsulate the methods as part of an object.
			      C ;
			      C ;				It has assembly time options directing the use of Intel processor extensions: AVX4, AVX2, SIMD, or none:
			      C ;				(Z (512), Y (256), or X (128) registers, or regular Q (64bit)).
			      C ;
			      C ;				Note: The file "compile_time_options.inc" contains the options that can be configured for extension usage, and other options.
			      C ;
			      C ;				If processor extensions are used, the caller must align the variables declared and passed
			      C ;				on the appropriate byte boundary (e.g. alignas 64 for 512)
			      C ;
			      C ;				This module is very light-weight (less than 2K bytes) and relatively fast,
			      C ;				but is not intended for all processor types or all environments. 
			      C ;
			      C ;				Use for private (hobbyist), or instructional, or as an example for more ambitious projects
			      C ;
			      C ;--------------------------------------------------------------------------------------------------------------------------------------------------------------
			      C ;
			      C ;			MIT License
			      C ;
			      C ;			Copyright (c) 2024 John G. Lynch
			      C ;
			      C ;				Permission is hereby granted, free of charge, to any person obtaining a copy
			      C ;				of this software and associated documentation files (the "Software"), to deal
			      C ;				in the Software without restriction, including without limitation the rights
			      C ;				to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
			      C ;				copies of the Software, and to permit persons to whom the Software is
			      C ;				furnished to do so, subject to the following conditions:
			      C ;
			      C ;				The above copyright notice and this permission notice shall be included in all
			      C ;				copies or substantial portions of the Software.
			      C ;
			      C ;				THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
			      C ;				IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
			      C ;				FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
			      C ;				AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
			      C ;				LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
			      C ;				OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
			      C ;				SOFTWARE.
			      C ;
			      C ENDIF			; legalnotes
			      C 
								INCLUDE			compile_time_options.inc
			      C IFNDEF		legalnotes
			      C legalnotes	EQU		1
			      C .LIST
			      C ;
			      C ;			ui512aMacros
			      C ;
			      C ;			File:			compile_time_options.inc
			      C ;			Author:			John G. Lynch
			      C ;			Legal:			Copyright @2024, per MIT License below
			      C ;			Date:			May 13, 2024
			      C ;
			      C ;			Notes:
			      C ;				ui512 is a small project to provide basic operations for a variable type of unsigned 512 bit integer.
			      C ;
			      C ;				ui512a provides basic operations: zero, copy, compare, add, subtract.
			      C ;				ui512b provides basic bit-oriented operations: shift left, shift right, and, or, not, least significant bit and most significant bit.
			      C ;               ui512md provides multiply and divide.
			      C ;
			      C ;				It is written in assembly language, using the MASM (ml64) assembler provided as an option within Visual Studio.
			      C ;				(currently using VS Community 2022 17.14.10)
			      C ;
			      C ;				It provides external signatures that allow linkage to C and C++ programs,
			      C ;				where a shell/wrapper could encapsulate the methods as part of an object.
			      C ;
			      C ;				It has assembly time options directing the use of Intel processor extensions: AVX4, AVX2, SIMD, or none:
			      C ;				(Z (512), Y (256), or X (128) registers, or regular Q (64bit)).
			      C ;				
			      C ;				This file contains to options, set them here.
			      C ;
			      C ;				If processor extensions are used, the caller must align the variables declared and passed
			      C ;				on the appropriate byte boundary (e.g. alignas 64 for 512)
			      C ;
			      C ;				This module is very light-weight (less than 2K bytes) and relatively fast,
			      C ;				but is not intended for all processor types or all environments. 
			      C ;
			      C ;				Use for private (hobbyist), or instructional, or as an example for more ambitious projects is all it is meant to be.
			      C ;
			      C ;--------------------------------------------------------------------------------------------------------------------------------------------------------------
			      C ;
			      C ;			MIT License
			      C ;
			      C ;			Copyright (c) 2024 John G. Lynch
			      C ;
			      C ;				Permission is hereby granted, free of charge, to any person obtaining a copy
			      C ;				of this software and associated documentation files (the "Software"), to deal
			      C ;				in the Software without restriction, including without limitation the rights
			      C ;				to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
			      C ;				copies of the Software, and to permit persons to whom the Software is
			      C ;				furnished to do so, subject to the following conditions:
			      C ;
			      C ;				The above copyright notice and this permission notice shall be included in all
			      C ;				copies or substantial portions of the Software.
			      C ;
			      C ;				THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
			      C ;				IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
			      C ;				FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
			      C ;				AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
			      C ;				LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
			      C ;				OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
			      C ;				SOFTWARE.
			      C ;
			      C ENDIF			; legalnotes
			      C 
			      C IFNDEF							complie_time_options_INC
 = 1			      C complie_time_options_INC		EQU			<1>
			      C 
			      C ;			Configuration choices
 = 00000001		      C __UseZ			EQU				1									; Use AVX4 processor features (512 bit registers and instructions)
 = 00000000		      C __UseY			EQU				0									; Use AVX2 processor features (256 bit registers and instructions)
 = 00000000		      C __UseX			EQU				0									; Use SIMD/SSE processor features (128 bit registers and instructions)
 = 00000000		      C __UseQ			EQU				0									; Do not use extensions, use standard x64 bit registers and instructions
			      C ;
 = 00000001		      C __VerifyRegs	EQU				1									; in debug mode, or with unit tests, define routine to verify non-volatile regs 
 = 00000000		      C __CheckAlign	EQU				0									; User is expected to pass arguments aligned on 64 byte boundaries, 
			      C ;																	; This setting enforces that with a check. It should not be necessary, but included to help debugging
			      C 
			      C ENDIF			; complie_time_options_INC
			      C 
								INCLUDE			ui512aMacros.inc
			      C IFNDEF		legalnotes
			      C legalnotes	EQU		1
			      C .LIST
			      C ;
			      C ;			ui512aMacros
			      C ;
			      C ;			File:			ui512aMacros.inc
			      C ;			Author:			John G. Lynch
			      C ;			Legal:			Copyright @2024, per MIT License below
			      C ;			Date:			May 13, 2024
			      C ;
			      C ;			Notes:
			      C ;				ui512 is a small project to provide basic operations for a variable type of unsigned 512 bit integer.
			      C ;
			      C ;				ui512a provides basic operations: zero, copy, compare, add, subtract.
			      C ;				ui512b provides basic bit-oriented operations: shift left, shift right, and, or, not, least significant bit and most significant bit.
			      C ;               ui512md provides multiply and divide.
			      C ;
			      C ;				It is written in assembly language, using the MASM (ml64) assembler provided as an option within Visual Studio.
			      C ;				(currently using VS Community 2022 17.14.10)
			      C ;
			      C ;				It provides external signatures that allow linkage to C and C++ programs,
			      C ;				where a shell/wrapper could encapsulate the methods as part of an object.
			      C ;
			      C ;				It has assembly time options directing the use of Intel processor extensions: AVX4, AVX2, SIMD, or none:
			      C ;				(Z (512), Y (256), or X (128) registers, or regular Q (64bit)).
			      C ;
			      C ;				Note: The file "compile_time_options.inc" contains the options that can be configured for extension usage, and other options.
			      C ;
			      C ;				If processor extensions are used, the caller must align the variables declared and passed
			      C ;				on the appropriate byte boundary (e.g. alignas 64 for 512)
			      C ;
			      C ;				This module is very light-weight (less than 2K bytes) and relatively fast,
			      C ;				but is not intended for all processor types or all environments. 
			      C ;
			      C ;				Use for private (hobbyist), or instructional, or as an example for more ambitious projects is all it is meant to be.
			      C ;
			      C ;--------------------------------------------------------------------------------------------------------------------------------------------------------------
			      C ;
			      C ;			MIT License
			      C ;
			      C ;			Copyright (c) 2024 John G. Lynch
			      C ;
			      C ;				Permission is hereby granted, free of charge, to any person obtaining a copy
			      C ;				of this software and associated documentation files (the "Software"), to deal
			      C ;				in the Software without restriction, including without limitation the rights
			      C ;				to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
			      C ;				copies of the Software, and to permit persons to whom the Software is
			      C ;				furnished to do so, subject to the following conditions:
			      C ;
			      C ;				The above copyright notice and this permission notice shall be included in all
			      C ;				copies or substantial portions of the Software.
			      C ;
			      C ;				THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
			      C ;				IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
			      C ;				FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
			      C ;				AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
			      C ;				LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
			      C ;				OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
			      C ;				SOFTWARE.
			      C ;
			      C 
			      C ENDIF			; legalnotes
			      C 
			      C IFNDEF			ui512aMacros_INC
 = 1			      C ui512aMacros_INC EQU			<1>
			      C 
			      C 
			      C ;           header file equivalent extern declarations
			      C ;			EXTERN "C" signatures (from ui512a.asm)
			      C 
			      C ;	// void zero_u ( u64* destarr ); 
			      C ;	// fill supplied 512bit (8 QWORDS) with zero
			      C EXTERNDEF		zero_u:PROC
			      C 
			      C 
			      C ;	// void copy_u ( u64* destarr, u64* srcarr );
			      C ;	// copy supplied 512bit (8 QWORDS) source to supplied destination
			      C EXTERNDEF		copy_u:PROC
			      C 
			      C ;	// void set_uT64 ( u64* destarr, u64 value );
			      C ;	// set supplied destination 512 bit to supplied u64 value
			      C EXTERNDEF		set_uT64:PROC
			      C 
			      C ;	// s16 compare_u ( u64* lh_op, u64* rh_op );
			      C ;	// compare supplied 512bit (8 QWORDS) LH operand to supplied RH operand
			      C ;	// returns: (0) for equal, -1 for less than, 1 for greater than (logical, unsigned compare)
			      C EXTERNDEF		compare_u:PROC
			      C 
			      C ;	// s16 compare_uT64 ( u64* lh_op, u64 rh_op );
			      C ;	// compare supplied 512bit (8 QWORDS) LH operand to supplied 64bit RH operand (value)
			      C ;	// returns: (0) for equal, -1 for less than, 1 for greater than (logical, unsigned compare)
			      C EXTERNDEF		compare_uT64:PROC
			      C 
			      C ;	// s16 add_u ( u64* sum, u64* addend1, u64* addend2 );
			      C ;	// add supplied 512bit (8 QWORDS) sources, place in supplied destination
			      C ;	// returns: zero for no carry, 1 for carry (overflow)
			      C EXTERNDEF		add_u:PROC
			      C 
			      C ;	// s16 add_uT64 ( u64* sum, u64* addend1, u64 addend2 );
			      C ;	// add 64bit QWORD (value) to supplied 512bit (8 QWORDS), place in supplied destination
			      C ;	// returns: zero for no carry, 1 for carry (overflow)
			      C EXTERNDEF		add_uT64:PROC
			      C 
			      C ;	// s16 sub_u ( u64* difference, u64* left operand, u64* right operand );
			      C ;	// subtract supplied 512bit (8 QWORDS) RH OP from LH OP giving difference in destination
			      C ;	// returns: zero for no borrow, 1 for borrow (underflow)
			      C EXTERNDEF		sub_u:PROC
			      C 
			      C ;	// s16 sub_uT64( u64* difference, u64* left operand, u64 right operand );
			      C ;	// subtract supplied 64 bit right hand (64 bit value) op from left hand (512 bit) giving difference
			      C ;	// returns: zero for no borrow, 1 for borrow (underflow)
			      C EXTERNDEF		sub_uT64:PROC
			      C ;
			      C 
			      C ;           Some coding shortcuts
 = ZMMWORD PTR		      C ZM_PTR			EQU				ZMMWORD PTR 
 = YMMWORD PTR		      C YM_PTR			EQU				YMMWORD PTR
 = XMMWORD PTR		      C XM_PTR			EQU				XMMWORD PTR
 = QWORD PTR		      C Q_PTR			EQU				QWORD PTR
 = DWORD PTR		      C D_PTR			EQU				DWORD PTR
 = WORD PTR		      C W_PTR			EQU				WORD PTR
 = BYTE PTR		      C B_PTR			EQU				BYTE PTR
 = DWORD BCST		      C m32BCST			EQU				DWORD BCST
 = QWORD BCST		      C m64BCST			EQU				QWORD BCST
			      C LPVOID			TYPEDEF			PTR VOID
			      C ;			mask codes (for compares using instructions like VPCMPUQ)
 = 00000000		      C CPEQ			EQU				0
 = 00000001		      C CPLT			EQU				1
 = 00000002		      C CPLE			EQU				2
 = 00000003		      C CPFALSE			EQU				3
 = 00000004		      C CPNE			EQU				4
 = 00000005		      C CPGE			EQU				5
 = 00000006		      C CPGT			EQU				6
 = 00000007		      C CPTRUE			EQU				7
			      C 
			      C ;			Mask values (for k reg) used to select particulare QWORDS from X, Y, or Z simd regs
 = 00000001		      C MaskBit0		EQU				B_PTR [ 00000001b ]
 = 00000002		      C MaskBit1		EQU				B_PTR [ 00000010b ]
 = 00000004		      C MaskBit2		EQU				B_PTR [ 00000100b ]
 = 00000008		      C MaskBit3		EQU				B_PTR [ 00001000b ]
 = 00000010		      C MaskBit4		EQU				B_PTR [ 00010000b ]
 = 00000020		      C MaskBit5		EQU				B_PTR [ 00100000b ]
 = 00000040		      C MaskBit6		EQU				B_PTR [ 01000000b ]
 = 00000080		      C MaskBit7		EQU				B_PTR [ 10000000b ]
			      C 
			      C ;			Another way to get masks
			      C kMask			RECORD			b8:1, b7:1, b6:1, b5:1, b4:1, b3:1, b2:1, b1:1, b0:1
			      C 
			      C ;
			      C ; MemConstants <none>
			      C ;
			      C ;		Define useful constants
			      C ;
			      C MemConstants	MACRO
			      C 
			      C qOnes			QWORD           8 DUP (0ffffffffffffffffh)
			      C ;
			      C zeroQ			DQ				0
			      C mskHex100		DD				0100h
			      C ;		Return codes commonly used.			
			      C ret0			DD				0								
			      C ret1			DD				1
			      C ret_minus_1		DD				-1
			      C ;		Masks commonly used
			      C mskAll8			DB				255
			      C mskB0			DB				1
			      C mskB1			DB				2
			      C mskB2			DB				4
			      C mskB3			DB				8
			      C mskB4			DB				16
			      C mskB5			DB				32
			      C mskB6			DB				64
			      C mskB7			DB				128
			      C 
			      C 				ENDM
			      C 
			      C ;==================================================================================================
			      C ;           Notes on x64 calling conventions        specifically "fast call"
			      C ; ref: https://learn.microsoft.com/en-us/cpp/build/x64-calling-convention?view=msvc-170
			      C ; The callers first four parameters are passed in registers: RCX, RDX, R8, R9 if integer or address
			      C ; if floating point XMM0L, XMM1L, XMM2L, XMM3L
			      C ; return (if any) is in EAX
			      C ;
			      C ; RAX, RCX, RDX, R8, R9, R10, R11 are considered volatile, and do not need to be saved
			      C ; XMM0, YMM0, ZMM0 and  ..1, ..2, ..3, ..4, and ..5 are considered volatile,
			      C ;	and do not need to be saved
			      C ;  ZMM16 to ZMM31: volatile, also do not need to be zeroed to resume full clock speeds
			      C ;
			      C ; R12, R13, R14, R15, RDI, RSI, RBX, RBP, RSP are non-volatile and if used, must be restored
			      C ; XMM, YMM, and ZMM ..6 thru 15 are non-volatile and if used, must be restored
			      C ;
			      C ; A "leaf" function is one that does not call and does not change non volatile registers
			      C ; leaf functionss therefore do not need frame, prolog or epilog
			      C ;
			      C ;==================================================================================================
			      C 
			      C ;==================================================================================================
			      C ; Selected macros from "macamd64.inc" (c) Microsoft Corporation
			      C ;	These macros generate .xdata and .pdata entries in the executable image file.
			      C ;	The entries assist in exception and debugging; helping 'unwind' operations.
			      C ;	Only a few macros are included, and are reformatted to match coding style:
			      C ;	indents and capitalization.
			      C ;
			      C ; LEAF_ENTRY <Name>, <Section>, <NoPad>
			      C ;
			      C ; Macro Description:
			      C ;
			      C ;   This macro indicates the beginning of a leaf function.
			      C ;
			      C ;   A leaf function is one that DOES NOT:
			      C ;
			      C ;   - manipulate non-volatile registers
			      C ;   - manipulate the stack pointer
			      C ;   - call other functions
			      C ;   - reference an exception handler
			      C ;   - contain a prologue
			      C ;   - have any unwind data associated with it
			      C ;
			      C ; Arguments:
			      C ;
			      C ;   Name - Supplies the name of the function
			      C ;
			      C ;   Section - Supplies the name of the section within which the function
			      C ;             is to appear
			      C ;
			      C ;   NoPad - If present, indicates that the function should not be prefixed
			      C ;           with 6 bytes of padding.  This is for internal use only - the
			      C ;           calling standard dictates that functions (nested and leaf) must
			      C ;           be prefixed with padding.
			      C ;
			      C Leaf_Entry		MACRO			Name, Section
			      C Section			SEGMENT			PARA 'CODE'
			      C 				DB				6 DUP (0cch)
			      C 				ALIGN			16
			      C 				PUBLIC			Name
			      C Name			PROC			FRAME
			      C 				.ENDPROLOG
			      C 				ENDM
			      C 
			      C ;
			      C ; LEAF_END <Name>, <Section>
			      C ;
			      C ; Macro Description:
			      C ;
			      C ;   This macro indicates the end of a leaf function.  It must be paired
			      C ;   with a LEAF_ENTRY macro that includes matching Name and Section
			      C ;   parameters.
			      C ;
			      C ; Arguments:
			      C ;
			      C ;   Name - Supplies the name of the function.  Must match that supplied to
			      C ;          the corresponding LEAF_ENTRY macro.
			      C ;
			      C ;   Section - Supplies the name of the section within which the function
			      C ;             is to appear.  Must match that supplied to the corresponding
			      C ;             LEAF_ENTRY macro.
			      C ;
			      C Leaf_End		MACRO			Name, Section
			      C Name			ENDP
			      C Section			ENDS
			      C 				ENDM
			      C 
			      C ;===========================================================================================
			      C ;          Local macros
			      C ;===========================================================================================
			      C 
			      C ;
			      C ; CheckAlign <RAddr>
			      C ;
			      C ;			Test passed variable addresses for 64 byte alignment
			      C ;			Note: Better performance if this is off, but for debugging, maybe have it on
			      C ;
			      C 
			      C CheckAlign		MACRO			Raddr
			      C 				LOCAL			ok
			      C 	IF	__CheckAlign
			      C 				TEST			Raddr, 63							; Is specified param aligned 64?
			      C 				JZ				ok									; Yes, passes test, continue
			      C 				INT				13									; No? fails, break (can substitute other exception handling)
			      C ok:
			      C 	ENDIF
			      C 				ENDM
			      C 
			      C ;
			      C ; VerifyRegs <none>
			      C ;
			      C ;			If option is on, generate a function, callable by unit test routines, 
			      C ;				to save non-volatile registers in passed structure.
			      C ;
			      C IF	__VerifyRegs
			      C ;--------------------------------------------------------------------------------------------------------------------------------------------------------------
			      C ;			EXTERNDEF		reg_verify:PROC	;	void reg_verify ( u64* regstruct)
			      C ;			reg_verify		-	copy non-volatile regs into callers struct of nine qwords) intended for unit tests to verify non-volatile regs are not changed
			      C ;			Prototype:		-	void reg_verify( uu64* regstruct);
			      C ;			regstruct		-	Address of 9 QWORDS in a struct where regs will be copied (in RCX)
			      C ; //			reg_verify		-	save non-volatile regs for verification (debug)
			      C ; //			Prototype		-	void reg_verify ( u64* reg struct)
			      C EXTERNDEF		reg_verify:PROC	;	void reg_verify ( u64* reg struct)
			      C 
			      C VerifyRegs		MACRO
			      C 				Leaf_Entry		reg_verify, ui512
			      C 				MOV				Q_PTR [ RCX ] [ 0 * 8 ], R12
			      C 				MOV				Q_PTR [ RCX ] [ 1 * 8 ], R13
			      C 				MOV				Q_PTR [ RCX ] [ 2 * 8 ], R14
			      C 				MOV				Q_PTR [ RCX ] [ 3 * 8 ], R15
			      C 				MOV				Q_PTR [ RCX ] [ 4 * 8 ], RDI
			      C 				MOV				Q_PTR [ RCX ] [ 5 * 8 ], RSI
			      C 				MOV				Q_PTR [ RCX ] [ 6 * 8 ], RBX
			      C 				MOV				Q_PTR [ RCX ] [ 7 * 8 ], RBP
			      C 				MOV				Q_PTR [ RCX ] [ 8 * 8 ], RSP
			      C 				RET
			      C 				Leaf_End		reg_verify, ui512
			      C 				ENDM
			      C ENDIF
			      C 
			      C ;
			      C ;			Zero a 512 bit destination, conditional assembly based on configuration parameters
			      C ;
			      C Zero512			MACRO			dest:REQ
			      C 	IF		__UseZ
			      C 				CheckAlign		dest
			      C 				VPXORQ			ZMM31, ZMM31, ZMM31
			      C 				VMOVDQA64		ZM_PTR [ dest ], ZMM31
			      C 	ELSEIF	__UseY
			      C 				CheckAlign		dest
			      C 				VPXORQ			YMM4, YMM4, YMM4
			      C 				FOR				idx, < 0, 4 >
			      C 				VMOVDQA64		YM_PTR [ dest ] [ idx * 8 ], YMM4
			      C 				ENDM
			      C 	ELSEIF	__UseX
			      C 				CheckAlign		dest
			      C 				PXOR			XMM4, XMM4
			      C 				FOR				idx, < 0, 2, 4, 6 >
			      C 				MOVDQA			XM_PTR [ dest ] [ idx * 8 ], XMM4
			      C 				ENDM		
			      C 	ELSE
			      C 				XOR				RAX, RAX
			      C 				FOR				idx,  < 0, 1, 2, 3, 4, 5, 6, 7 >
			      C 				MOV				Q_PTR [ dest ] [ idx * 8 ], RAX
			      C 				ENDM
			      C 	ENDIF
			      C 				ENDM
			      C 
			      C ;
			      C ;			Zero a 512 bit destination, always use Q_PTR, avoids clock penalty from using SIMD
			      C ;
			      C Zero512Q		MACRO			dest:REQ
			      C 				XOR				RAX, RAX
			      C 				FOR				idx,  < 0, 1, 2, 3, 4, 5, 6, 7 >
			      C 				MOV				Q_PTR [ dest ] [ idx * 8 ], RAX
			      C 				ENDM
			      C 
			      C 				ENDM
			      C 
			      C ;
			      C ;			Copy a 512 bit source to destination, conditional assembly based on configuration parameters
			      C ;
			      C Copy512			MACRO			dest:REQ, src:REQ
			      C 	IF		__UseZ 
			      C 				CheckAlign		dest
			      C 				CheckAlign		src
			      C 				VMOVDQA64		ZMM31, ZM_PTR [ src ]
			      C 				VMOVDQA64		ZM_PTR [ dest ], ZMM31
			      C 	ELSEIF	__UseY
			      C 				CheckAlign		dest
			      C 				CheckAlign		src
			      C 				VMOVDQA64		YMM4, YM_PTR [ src + 0 * 8 ]
			      C 				VMOVDQA64		YM_PTR [ dest ] [ 0 * 8 ], YMM4	; alternate ymm regs in case pipeline can execute next without waiting for this.
			      C 				VMOVDQA64		YMM5, YM_PTR [ src ] [ 4 * 8 ]
			      C 				VMOVDQA64		YM_PTR [ dest ] [ 4 * 8 ], YMM5
			      C 	ELSEIF	__UseX
			      C 				CheckAlign		dest
			      C 				CheckAlign		src
			      C 				MOVDQA			XMM4, XM_PTR [ src ] [ 0 * 8 ]
			      C 				MOVDQA			XM_PTR [ dest ] [ 0 * 8 ], XMM4
			      C 				MOVDQA			XMM3, XM_PTR [ src ] [ 2 * 8 ]
			      C 				MOVDQA			XM_PTR [ dest ] [ 2 * 8 ], XMM3
			      C 				MOVDQA			XMM4, XM_PTR [ src ] [ 4 * 8 ]
			      C 				MOVDQA			XM_PTR [ dest ] [ 4 * 8 ], XMM4
			      C 				MOVDQA			XMM3, XM_PTR [ src ] [ 6 * 8 ]
			      C 				MOVDQA			XM_PTR [ dest ] [ 6 * 8 ], XMM3
			      C 	ELSE
			      C 				FOR				idx, < 0, 1, 2, 3, 4, 5, 6, 7 >
			      C 				MOV				RAX, Q_PTR [ src ] [ idx * 8 ]
			      C 				MOV				Q_PTR [ dest ] [ idx * 8 ], RAX
			      C 				ENDM
			      C 	ENDIF
			      C 				ENDM
			      C 
			      C ;
			      C ;			Copy a 512 bit source to destination, always use Q_PTR, avoids clock penalty from using SIMD
			      C ;
			      C Copy512Q		MACRO			dest:REQ, src:REQ
			      C 				FOR				idx, < 0, 1, 2, 3, 4, 5, 6, 7 >
			      C 				MOV				RAX, Q_PTR [ src ] [ idx * 8 ]
			      C 				MOV				Q_PTR [ dest ] [ idx * 8 ], RAX
			      C 				ENDM
			      C 
			      C 				ENDM
			      C 
			      C ENDIF	; IFNDEF			ui512aMacros_INC
			      C 
								INCLUDE			ui512bMacros.inc
			      C ;
			      C ;			ui512bMacros
			      C ;
			      C ;--------------------------------------------------------------------------------------------------------------------------------------------------------------
			      C ;			File:			ui512bMacros.inc
			      C ;			Author:			John G. Lynch
			      C ;			Legal:			Copyright @2024, per MIT License below
			      C ;			Date:			June 11, 2024
			      C ;
			      C 	
			      C 
			      C IFNDEF			ui512bMacros_INC
 = 1			      C ui512bMacros_INC EQU		<1>
			      C 
			      C 				INCLUDE		legalnotes.inc
			      C 
			      C IFNDEF		legalnotes
			      C legalnotes	EQU		1
			      C .LIST
			      C ;			legalnotes
			      C ;
			      C ;			File:			legalnotes.inc
			      C ;			Author:			John G. Lynch
			      C ;			Legal:			Copyright @2024, per MIT License below
			      C ;			Date:			August 20, 2025
			      C ;
			      C ;
			      C ;			Notes:
			      C ;				ui512 is a small project to provide basic operations for a variable type of unsigned 512 bit integer.
			      C ;
			      C ;				ui512a provides basic operations: zero, copy, compare, add, subtract.
			      C ;				ui512b provides basic bit-oriented operations: shift left, shift right, and, or, not, least significant bit and most significant bit.
			      C ;               ui512md provides multiply and divide.
			      C ;
			      C ;				It is written in assembly language, using the MASM (ml64) assembler provided as an option within Visual Studio.
			      C ;				(currently using VS Community 2022 17.14.10)
			      C ;
			      C ;				It provides external signatures that allow linkage to C and C++ programs,
			      C ;				where a shell/wrapper could encapsulate the methods as part of an object.
			      C ;
			      C ;				It has assembly time options directing the use of Intel processor extensions: AVX4, AVX2, SIMD, or none:
			      C ;				(Z (512), Y (256), or X (128) registers, or regular Q (64bit)).
			      C ;
			      C ;				Note: The file "compile_time_options.inc" contains the options that can be configured for extension usage, and other options.
			      C ;
			      C ;				If processor extensions are used, the caller must align the variables declared and passed
			      C ;				on the appropriate byte boundary (e.g. alignas 64 for 512)
			      C ;
			      C ;				This module is very light-weight (less than 2K bytes) and relatively fast,
			      C ;				but is not intended for all processor types or all environments. 
			      C ;
			      C ;				Use for private (hobbyist), or instructional, or as an example for more ambitious projects
			      C ;
			      C ;--------------------------------------------------------------------------------------------------------------------------------------------------------------
			      C ;
			      C ;			MIT License
			      C ;
			      C ;			Copyright (c) 2024 John G. Lynch
			      C ;
			      C ;				Permission is hereby granted, free of charge, to any person obtaining a copy
			      C ;				of this software and associated documentation files (the "Software"), to deal
			      C ;				in the Software without restriction, including without limitation the rights
			      C ;				to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
			      C ;				copies of the Software, and to permit persons to whom the Software is
			      C ;				furnished to do so, subject to the following conditions:
			      C ;
			      C ;				The above copyright notice and this permission notice shall be included in all
			      C ;				copies or substantial portions of the Software.
			      C ;
			      C ;				THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
			      C ;				IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
			      C ;				FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
			      C ;				AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
			      C ;				LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
			      C ;				OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
			      C ;				SOFTWARE.
			      C ;
			      C ENDIF			; legalnotes
			      C 
			      C 
			      C ;           header file equivalent extern declarations
			      C ;			EXTERN "C" signatures (from ui512b.asm)
			      C 
			      C ;   // void shr_u ( u64* destination, u64* source, u16 bits_to_shift )
			      C ;   // shift supplied source 512bit (8 QWORDS) right, put in destination
			      C EXTERNDEF		shr_u:PROC
			      C 
			      C ;   // void shl_u ( u64* destination, u64* source, u16 bits_to_shift );
			      C ;   // shift supplied source 512bit (8 QWORDS) left, put in destination
			      C EXTERNDEF		shl_u:PROC
			      C 
			      C ;   // void and_u ( u64* destination, u64* lh_op, u64* rh_op );
			      C ;   // logical 'AND' bits in lh_op, rh_op, put result in destination
			      C EXTERNDEF		and_u:PROC
			      C 
			      C ;   // logical 'OR' bits in lh_op, rh_op, put result in destination
			      C ;   // void or_u( u64* destination, u64* lh_op, u64* rh_op);
			      C EXTERNDEF		or_u:PROC
			      C 
			      C ;   // logical 'XOR' bits in lh_op, rh_op, put result in destination
			      C ;   // void xor_u( u64* destination, u64* lh_op, u64* rh_op);
			      C EXTERNDEF		xor_u:PROC
			      C 
			      C ;   // logical 'NOT' bits in source, put result in destination
			      C ;	// void not_u( u64* destination, u64* source);
			      C EXTERNDEF		not_u:PROC
			      C 
			      C ;   // find most significant bit in supplied source 512bit (8 QWORDS)
			      C ;	// s16 msb_u( u64* );
			      C ;   // returns: -1 if no most significant bit, bit number otherwise, bits numbered 0 to 511 inclusive
			      C ;	//	Note:	a returned zero means the significant bit is bit0 of the eighth word of the 512bit source parameter; (the right most bit)
			      C ;	//			a returned 511 means bit63 of the first word(the left most bit);	//	a returned 511 means bit63 of the first word
			      C EXTERNDEF		msb_u:PROC
			      C 
			      C ;   // find least significant bit in supplied source 512bit (8 QWORDS)
			      C ;	// s16 lsb_u( u64* );
			      C ;   // returns: -1 if no least significant bit, bit number otherwise, bits numbered 0 to 511 inclusive
			      C ;	//	Note:	a returned zero means the significant bit is bit0 of the eighth word of the 512bit source parameter; (the right most bit)
			      C ;	//			a returned 511 means bit63 of the first word(the left most bit);	//	a returned 511 means bit63 of the first word
			      C EXTERNDEF		lsb_u:PROC
			      C 
			      C ENDIF			; ui512bMacros_INC
			      C 
								INCLUDE			ui512mdMacros.inc
			      C 
			      C ;
			      C ;			ui512mdMacros
			      C ;
			      C ;--------------------------------------------------------------------------------------------------------------------------------------------------------------
			      C ;			File:			ui512mdMacros.inc
			      C ;			Author:			John G. Lynch
			      C ;			Legal:			Copyright @2024, per MIT License below
			      C ;			Date:			June 20, 2024
			      C 
			      C 
			      C IFNDEF			ui512mdMacros_INC
 = 1			      C ui512mdMacros_INC EQU			<1>
			      C 
			      C 				INCLUDE			legalnotes.inc
			      C 
			      C IFNDEF		legalnotes
			      C legalnotes	EQU		1
			      C .LIST
			      C ;			legalnotes
			      C ;
			      C ;			File:			legalnotes.inc
			      C ;			Author:			John G. Lynch
			      C ;			Legal:			Copyright @2024, per MIT License below
			      C ;			Date:			August 20, 2025
			      C ;
			      C ;
			      C ;			Notes:
			      C ;				ui512 is a small project to provide basic operations for a variable type of unsigned 512 bit integer.
			      C ;
			      C ;				ui512a provides basic operations: zero, copy, compare, add, subtract.
			      C ;				ui512b provides basic bit-oriented operations: shift left, shift right, and, or, not, least significant bit and most significant bit.
			      C ;               ui512md provides multiply and divide.
			      C ;
			      C ;				It is written in assembly language, using the MASM (ml64) assembler provided as an option within Visual Studio.
			      C ;				(currently using VS Community 2022 17.14.10)
			      C ;
			      C ;				It provides external signatures that allow linkage to C and C++ programs,
			      C ;				where a shell/wrapper could encapsulate the methods as part of an object.
			      C ;
			      C ;				It has assembly time options directing the use of Intel processor extensions: AVX4, AVX2, SIMD, or none:
			      C ;				(Z (512), Y (256), or X (128) registers, or regular Q (64bit)).
			      C ;
			      C ;				Note: The file "compile_time_options.inc" contains the options that can be configured for extension usage, and other options.
			      C ;
			      C ;				If processor extensions are used, the caller must align the variables declared and passed
			      C ;				on the appropriate byte boundary (e.g. alignas 64 for 512)
			      C ;
			      C ;				This module is very light-weight (less than 2K bytes) and relatively fast,
			      C ;				but is not intended for all processor types or all environments. 
			      C ;
			      C ;				Use for private (hobbyist), or instructional, or as an example for more ambitious projects
			      C ;
			      C ;--------------------------------------------------------------------------------------------------------------------------------------------------------------
			      C ;
			      C ;			MIT License
			      C ;
			      C ;			Copyright (c) 2024 John G. Lynch
			      C ;
			      C ;				Permission is hereby granted, free of charge, to any person obtaining a copy
			      C ;				of this software and associated documentation files (the "Software"), to deal
			      C ;				in the Software without restriction, including without limitation the rights
			      C ;				to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
			      C ;				copies of the Software, and to permit persons to whom the Software is
			      C ;				furnished to do so, subject to the following conditions:
			      C ;
			      C ;				The above copyright notice and this permission notice shall be included in all
			      C ;				copies or substantial portions of the Software.
			      C ;
			      C ;				THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
			      C ;				IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
			      C ;				FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
			      C ;				AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
			      C ;				LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
			      C ;				OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
			      C ;				SOFTWARE.
			      C ;
			      C ENDIF			; legalnotes
			      C 
			      C 
			      C ;--------------------------------------------------------------------------------------------------------------------------------------------------------------
			      C ;			signatures (from ui512md.asm)
			      C 
			      C ; //			mult_uT64		-	multiply 512 bit multiplicand by 64 bit multiplier, giving 512 product, 64 bit overflow
			      C ; //			Prototype:		-	void mult_uT64( u64* product, u64* overflow, u64* multiplicand, u64 multiplier);
			      C EXTERNDEF		mult_uT64:PROC	;	void mult_uT64( u64* product, u64* overflow, u64* multiplicand, u64 multiplier);
			      C 
			      C ; //			mult_u			-	multiply 512 multiplicand by 512 multiplier, giving 512 product, overflow
			      C ; //			Prototype:		-	void mult_u( u64* product, u64* overflow, u64* multiplicand, u64* multiplier);
			      C EXTERNDEF		mult_u:PROC		;	void mult_u( u64* product, u64* overflow, u64* multiplicand, u64* multiplier);
			      C 
			      C ; //			div_uT64		-	divide 512 bit dividend by 64 bit bit divisor, giving 512 bit quotient and 64 bit remainder
			      C ; //			Prototype:		-	s16 div_u( u64* quotient, u64* remainder, u64* dividend, u64 divisor,);
			      C EXTERNDEF		div_uT64:PROC	;	s16 div_uT64( u64* quotient, u64* remainder, u64* dividend, u64 divisor);
			      C 
			      C ; //			div_u			-	divide 512 bit dividend by 512 bit divisor, giving 512 bit quotient and remainder
			      C ; //			Prototype:		-	s16 div_u( u64* quotient, u64* remainder, u64* dividend, u64* divisor);
			      C EXTERNDEF		div_u:PROC		;	s16 div_u( u64* quotient, u64* remainder, u64* dividend, u64* divisor);
			      C 
			      C ;--------------------------------------------------------------------------------------------------------------------------------------------------------------
			      C 
			      C 
			      C CreateFrame		MACRO			argsize, argsavename
			      C ;
			      C ;			set up frame to save regs, and to create aligned working memory for scratch variables
			      C ;			argsize is the amount of space to be made on the stack for locals and padding (at least 40h on each end)
			      C ;			argsavename is the name of the variable, within the LOCAL declarations, QWORD, for the RBP to be saved, and restored from
			      C ;			No prologue, epilogue should be used. LOCAL declarations immediately after PROC statement, then this macro
			      C ;			Note: LOCAL variables will START on a 64 byte aligned address space. Your order and sizes of your variables will be in sequence as declared
			      C ;			and thus provide no assurance of alignment other than what your declarations imply. In other words, declaring a byte var at the beginning
			      C ;			throws everyting after that off by a byte. OK, not exacly, the asm will align by data type (eg, QWORD on 8 byte), but there is no way to get back
			      C ;			to 64 byte alignment, so declare those first, then QWORD, then DWORD, etc. Or, count your declares such that you get what/where you want.
			      C ;			example:
			      C ;
			      C ;somename	PROC
			      C ;			LOCAL		padding1[8]:QWORD				; warning: do not touch, initialize, or use padding. (on either end)
			      C ;			LOCAL		somelocal:ZMMWORD				; a 512 bit, 64 byte aligned var, ready for aligned load/store into ZMM (AVX2) register
			      C ;			LOCAL		some local variable declarions, some more, and some more
			      C ;			LOCAL		and some more
			      C ;			LOCAL		savedRBP:QWORD					; you might have other reg save space as well
			      C ;			LOCAL		padding2[8]:QWORD				; after your return statement, before ENDP, might LEA padding1 and padding2 to eliminate warning (unreferenced variables)
			      C ;			CREATEFRAME 200h, savedRBP					; (200h assumes 118h in those "some local variable declarations", adjust as necessary)
			      C ;
			      C ;			Use only one return from the PROC, and immediately before return, use ReleaseFrame macro, giving name of where RBP is saved
			      C ;
			      C 				PUSH			RBP
			      C 				MOV				RBP, RSP
			      C 				AND				RSP, -8
			      C 				SUB				RSP, argsize + 64					; make a gap between old stack pointer and current stack pointer for use as "LOCAL", adjust size if changes made to locals
			      C 				MOV				RAX, -64							; Round it (down), to make it, and local vars, align on 64 byte address (necessary for aligned ZMM load/store)
			      C 				AND				RAX, RBP							; note: "padding" variables must not be used. They are in areas where we have just rounded down, or in stack space for those we call
			      C 				XCHG			RAX, RBP							; RBP now points to top of gap between old stack pointer and current stack pointer, aligned on 64
			      C 				MOV				argsavename, RAX					; LOCAL variables now usable, using negative offsets from the new RBP value. Must restore RBP, RSP at exit (Use RELEASEFRAME)
			      C 				ENDM
			      C ;--------------------------------------------------------------------------------------------------------------------------------------------------------------
			      C 
			      C 
			      C ReleaseFrame	MACRO			argsavename
			      C ;			release memory set up by createframe macro
			      C ;			restores RSP, and RBP to as-called values
			      C ;			after these instructions are executed, LOCAL variables can NOT be accessed
			      C ;			This needs to be done to restore the stack correctly, but can be done only once
			      C ;			Strongly suggest doing this just prior to return instruction, and that there is only one return instruction from the PROC
			      C 				MOV				RSP, argsavename					; restore unadjusted / unrounded (the as when called) stack pointer (eliminating LOCAL storage) 
			      C 				POP				RBP									; restore base pointer for caller
			      C 				ENDM
			      C 
			      C ;--------------------------------------------------------------------------------------------------------------------------------------------------------------
			      C ;==========================================================================================
			      C ;           Notes on x64 calling conventions        aka "fast call"
			      C ; ref: https://learn.microsoft.com/en-us/cpp/build/x64-calling-convention?view=msvc-170
			      C ; The first four parameters are passed in registers: RCX, RDX, R8, R9 if integer or address
			      C ; if floating point XMM0L, XMM1L, XMM2L, XMM3L
			      C ;===========================================================================================
			      C ;
			      C ;===========================================================================================
			      C ; RAX, RCX, RDX, R8, R9, R10, R11 are considered volatile, and do not need to be saved
			      C ; XMM0, YMM0, ZMM0 and  ..1, ..2, ..3, ..4, and ..5 are considered volatile,
			      C ;	and do not need to be saved
			      C ;  ZMM16 to ZMM31: volatile, also do not need to be zeroed to resume full clock speeds
			      C ;
			      C ; R12, R13, R14, R15, RDI, RSI, RBX, RBP, RSP are non-volatile and if used, must be restored
			      C ; XMM, YMM, and ZMM ..6 thru 15 are non-volatile and if used, must be restored
			      C ;
			      C ; A "leaf" function is one that does not call and does not change non volatile registers
			      C ; leaf functionss therefore do not need frame, prolog or epilog
			      C ;
			      C ;===========================================================================================
			      C 
			      C ENDIF
			      C 

								OPTION			casemap:none
 00000000			.CODE			ui512md
								OPTION			PROLOGUE:none
								OPTION			EPILOGUE:none

								MemConstants
			     1	
 00000000  00000008 [	     1	qOnes			QWORD           8 DUP (0ffffffffffffffffh)
	    FFFFFFFFFFFFFFFF
	   ]
			     1	;
 00000040		     1	zeroQ			DQ				0
	   0000000000000000
 00000048 00000100	     1	mskHex100		DD				0100h
			     1	;		Return codes commonly used.			
 0000004C 00000000	     1	ret0			DD				0								
 00000050 00000001	     1	ret1			DD				1
 00000054 FFFFFFFF	     1	ret_minus_1		DD				-1
			     1	;		Masks commonly used
 00000058 FF		     1	mskAll8			DB				255
 00000059 01		     1	mskB0			DB				1
 0000005A 02		     1	mskB1			DB				2
 0000005B 04		     1	mskB2			DB				4
 0000005C 08		     1	mskB3			DB				8
 0000005D 10		     1	mskB4			DB				16
 0000005E 20		     1	mskB5			DB				32
 0000005F 40		     1	mskB6			DB				64
 00000060 80		     1	mskB7			DB				128
			     1	

				;--------------------------------------------------------------------------------------------------------------------------------------------------------------
				;			EXTERNDEF		mult_u:PROC					; void mult_u( u64* product, u64* overflow, u64* multiplicand, u64* multiplier)
				;			mult_u			-	multiply 512 multiplicand by 512 multiplier, giving 512 product, 512 overflow
				;			Prototype:		-	void mult_u( u64* product, u64* overflow, u64* multiplicand, u64* multiplier);
				;			product			-	Address of 8 QWORDS to store resulting product (in RCX)
				;			overflow		-	Address of 8 QWORDS to store resulting overflow (in RDX)
				;			multiplicand	-	Address of 8 QWORDS multiplicand (in R8)
				;			multiplier		-	Address of 8 QWORDS multiplier (in R9)
				;			returns			-	nothing (0)
				;
 00000061			mult_u			PROC			PUBLIC
								LOCAL			padding1 [ 8 ] : QWORD
								LOCAL			product [ 16 ] : QWORD
								LOCAL			savedRBP : QWORD
								LOCAL			savedRCX : QWORD, savedRDX : QWORD, savedR10 : QWORD, savedR11 : QWORD, savedR12 : QWORD
								LOCAL			plierl : WORD						; low limit index of of multiplier (7 - first non-zero)
								LOCAL			candl : WORD						; low limit index of multiplicand
								LOCAL			padding2 [ 16 ] : QWORD
 = padding2 + 64 - padding1	mult_u_ofs		EQU				padding2 + 64 - padding1			; offset is the size of the local memory declarations

								CreateFrame		220h, savedRBP
			     1	;
			     1	;			set up frame to save regs, and to create aligned working memory for scratch variables
			     1	;			argsize is the amount of space to be made on the stack for locals and padding (at least 40h on each end)
			     1	;			argsavename is the name of the variable, within the LOCAL declarations, QWORD, for the RBP to be saved, and restored from
			     1	;			No prologue, epilogue should be used. LOCAL declarations immediately after PROC statement, then this macro
			     1	;			Note: LOCAL variables will START on a 64 byte aligned address space. Your order and sizes of your variables will be in sequence as declared
			     1	;			and thus provide no assurance of alignment other than what your declarations imply. In other words, declaring a byte var at the beginning
			     1	;			throws everyting after that off by a byte. OK, not exacly, the asm will align by data type (eg, QWORD on 8 byte), but there is no way to get back
			     1	;			to 64 byte alignment, so declare those first, then QWORD, then DWORD, etc. Or, count your declares such that you get what/where you want.
			     1	;			example:
			     1	;
			     1	;somename	PROC
			     1	;			LOCAL		padding1[8]:QWORD				; warning: do not touch, initialize, or use padding. (on either end)
			     1	;			LOCAL		somelocal:ZMMWORD				; a 512 bit, 64 byte aligned var, ready for aligned load/store into ZMM (AVX2) register
			     1	;			LOCAL		some local variable declarions, some more, and some more
			     1	;			LOCAL		and some more
			     1	;			LOCAL		savedRBP:QWORD					; you might have other reg save space as well
			     1	;			LOCAL		padding2[8]:QWORD				; after your return statement, before ENDP, might LEA padding1 and padding2 to eliminate warning (unreferenced variables)
			     1	;			CREATEFRAME 200h, savedRBP					; (200h assumes 118h in those "some local variable declarations", adjust as necessary)
			     1	;
			     1	;			Use only one return from the PROC, and immediately before return, use ReleaseFrame macro, giving name of where RBP is saved
			     1	;
 00000061  55		     1					PUSH			RBP
 00000062  48/ 8B EC	     1					MOV				RBP, RSP
 00000065  48/ 83 E4 F8	     1					AND				RSP, -8
 00000069  48/ 81 EC	     1					SUB				RSP, 220h + 64					; make a gap between old stack pointer and current stack pointer for use as "LOCAL", adjust size if changes made to locals
	   00000260
 00000070  48/ C7 C0	     1					MOV				RAX, -64							; Round it (down), to make it, and local vars, align on 64 byte address (necessary for aligned ZMM load/store)
	   FFFFFFC0
 00000077  48/ 23 C5	     1					AND				RAX, RBP							; note: "padding" variables must not be used. They are in areas where we have just rounded down, or in stack space for those we call
 0000007A  48/ 95	     1					XCHG			RAX, RBP							; RBP now points to top of gap between old stack pointer and current stack pointer, aligned on 64
 0000007C  48/ 89 85	     1					MOV				savedRBP, RAX					; LOCAL variables now usable, using negative offsets from the new RBP value. Must restore RBP, RSP at exit (Use RELEASEFRAME)
	   FFFFFF38
 00000083  48/ 89 8D						MOV				savedRCX, RCX
	   FFFFFF30
 0000008A  48/ 89 95						MOV				savedRDX, RDX
	   FFFFFF28
 00000091  4C/ 89 95						MOV				savedR10, R10
	   FFFFFF20
 00000098  4C/ 89 9D						MOV				savedR11, R11
	   FFFFFF18
 0000009F  4C/ 89 A5						MOV				savedR12, R12
	   FFFFFF10
				; Check passed parameters alignment
								CheckAlign		RCX									; (out) Product
			     1					LOCAL			ok
			     1		IF	__CheckAlign
			     1					TEST			RCX, 63							; Is specified param aligned 64?
			     1					JZ				??0000									; Yes, passes test, continue
			     1					INT				13									; No? fails, break (can substitute other exception handling)
			     1	??0000:
			     1		ENDIF
								CheckAlign		RDX									; (out) Overflow
			     1					LOCAL			ok
			     1		IF	__CheckAlign
			     1					TEST			RDX, 63							; Is specified param aligned 64?
			     1					JZ				??0001									; Yes, passes test, continue
			     1					INT				13									; No? fails, break (can substitute other exception handling)
			     1	??0001:
			     1		ENDIF
								CheckAlign		R8									; (in) Multiplicand
			     1					LOCAL			ok
			     1		IF	__CheckAlign
			     1					TEST			R8, 63							; Is specified param aligned 64?
			     1					JZ				??0002									; Yes, passes test, continue
			     1					INT				13									; No? fails, break (can substitute other exception handling)
			     1	??0002:
			     1		ENDIF
								CheckAlign		R9									; (in) Multiplier
			     1					LOCAL			ok
			     1		IF	__CheckAlign
			     1					TEST			R9, 63							; Is specified param aligned 64?
			     1					JZ				??0003									; Yes, passes test, continue
			     1					INT				13									; No? fails, break (can substitute other exception handling)
			     1	??0003:
			     1		ENDIF

				; Examine multiplicand, save dimensions, handle edge cases of zero or one
 000000A6  49/ 8B C8						MOV				RCX, R8								; examine multiplicand
 000000A9  E8 00000000 E					CALL			msb_u								; get count to most significant bit (-1 if no bits)
 000000AE  66| 83 F8 FF						CMP				AX, -1								; multiplicand = 0? exit with product = 0
 000000B2  0F 84 00000125					JE				@@zeroandexit
 000000B8  66| 83 F8 00						CMP				AX, 0								; multiplicand = 1?	exit with product = multiplier
 000000BC  49/ 8B D1						MOV				RDX, R9								; address of multiplier (to be copied to product)
 000000BF  0F 84 00000140					JE				@@copyandexit
 000000C5  66| C1 E8 06						SHR				AX, 6								; divide msb by 64 to get Nr words
 000000C9  66| B9 0007						MOV				CX, 7 
 000000CD  66| 2B C8						SUB				CX, AX								; subtract from 7 to get starting (high order, left-most) beginning index
 000000D0  66| 89 8D						MOV				candl, CX							; save off multiplicand index lower limit (eliminate multiplying leading zero words)
	   FFFFFF0C

				; Examine multiplier, save dimensions, handle edge cases of zero or one
 000000D7  49/ 8B C9						MOV				RCX, R9								; examine multiplier
 000000DA  E8 00000000 E					CALL			msb_u								; get count to most significant bit (-1 if no bits)
 000000DF  66| 83 F8 FF						CMP				AX, -1								; multiplier = 0? exit with product = 0
 000000E3  0F 84 000000F4					JE				@@zeroandexit
 000000E9  66| 83 F8 00						CMP				AX, 0								; multiplier = 1? exit with product = multiplicand
 000000ED  49/ 8B D0						MOV				RDX, R8								; address of multiplicand (to be copied to product)
 000000F0  0F 84 0000010F					JE				@@copyandexit
 000000F6  66| C1 E8 06						SHR				AX, 6								; divide msb by 64 to get Nr words
 000000FA  66| B9 0007						MOV				CX, 7
 000000FE  66| 2B C8						SUB				CX, AX								; subtract from 7 to get starting (high order, left-most) beginning index
 00000101  66| 89 8D						MOV				plierl, CX							; save off multiplier index lower limit (eliminate multiplying leading zero words)
	   FFFFFF0E

				; In frame / stack reserved memory, clear 16 qword area for working version of overflow/product; set up indexes for loop
 00000108  48/ 8D 8D						LEA				RCX, product [ 0 ]
	   FFFFFF40
								Zero512			RCX									; clear working copy of overflow, need to start as zero, results are accumulated
			     1		IF		__UseZ
			     1					CheckAlign		RCX
			     2					LOCAL			ok
			     2		IF	__CheckAlign
			     2					TEST			RCX, 63							; Is specified param aligned 64?
			     2					JZ				??0004									; Yes, passes test, continue
			     2					INT				13									; No? fails, break (can substitute other exception handling)
			     2	??0004:
			     2		ENDIF
 0000010F  62 01 85 40/ EF   1					VPXORQ			ZMM31, ZMM31, ZMM31
	   FF
 00000115  62 61 FD 48/ 7F   1					VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
			     1		ELSEIF	__UseY
			     1					CheckAlign		RCX
			     1					VPXORQ			YMM4, YMM4, YMM4
			     1					FOR				idx, < 0, 4 >
			     1					VMOVDQA64		YM_PTR [ RCX ] [ idx * 8 ], YMM4
			     1					ENDM
			     1		ELSEIF	__UseX
			     1					CheckAlign		RCX
			     1					PXOR			XMM4, XMM4
			     1					FOR				idx, < 0, 2, 4, 6 >
			     1					MOVDQA			XM_PTR [ RCX ] [ idx * 8 ], XMM4
			     1					ENDM		
			     1		ELSE
			     1					XOR				RAX, RAX
			     1					FOR				idx,  < 0, 1, 2, 3, 4, 5, 6, 7 >
			     1					MOV				Q_PTR [ RCX ] [ idx * 8 ], RAX
			     1					ENDM
			     1		ENDIF
 0000011B  48/ 8D 4D 80						LEA				RCX, product [ 8 * 8 ]
								Zero512			RCX									; clear working copy of product (they need to be contiguous, so using working copy, not callers)
			     1		IF		__UseZ
			     1					CheckAlign		RCX
			     2					LOCAL			ok
			     2		IF	__CheckAlign
			     2					TEST			RCX, 63							; Is specified param aligned 64?
			     2					JZ				??0005									; Yes, passes test, continue
			     2					INT				13									; No? fails, break (can substitute other exception handling)
			     2	??0005:
			     2		ENDIF
 0000011F  62 01 85 40/ EF   1					VPXORQ			ZMM31, ZMM31, ZMM31
	   FF
 00000125  62 61 FD 48/ 7F   1					VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
			     1		ELSEIF	__UseY
			     1					CheckAlign		RCX
			     1					VPXORQ			YMM4, YMM4, YMM4
			     1					FOR				idx, < 0, 4 >
			     1					VMOVDQA64		YM_PTR [ RCX ] [ idx * 8 ], YMM4
			     1					ENDM
			     1		ELSEIF	__UseX
			     1					CheckAlign		RCX
			     1					PXOR			XMM4, XMM4
			     1					FOR				idx, < 0, 2, 4, 6 >
			     1					MOVDQA			XM_PTR [ RCX ] [ idx * 8 ], XMM4
			     1					ENDM		
			     1		ELSE
			     1					XOR				RAX, RAX
			     1					FOR				idx,  < 0, 1, 2, 3, 4, 5, 6, 7 >
			     1					MOV				Q_PTR [ RCX ] [ idx * 8 ], RAX
			     1					ENDM
			     1		ENDIF
 0000012B  4C/ 8D 1C 25						LEA				R11, [ 7 ] 							; index for multiplier (reduced until less than saved plierl) (outer loop)
	   00000007
 00000133  4D/ 8B E3						MOV				R12, R11							; index for multiplicand (reduced until less than saved candl) (inner loop)

				; multiply loop: an outer loop for each non-zero qword of multiplicand, with an inner loop for each non-zero qword of multiplier, results accumulated in 'product'
 00000136			@@multloop:
 00000136  4D/ 8B D3						MOV				R10, R11							; R10 holds index for overflow / product work area (results)
 00000139  4D/ 03 D4						ADD				R10, R12
 0000013C  49/ FF C2						INC				R10									; index for product/overflow 
 0000013F  4B/ 8B 04 E0						MOV				RAX, Q_PTR [ R8 ] [ R12 * 8 ]		; get qword of multiplicand
 00000143  4B/ F7 24 D9						MUL				Q_PTR [ R9 ] [ R11 * 8 ]			; multiply by qword of multiplier
 00000147  4A/ 01 84 D5						ADD				product [ R10 * 8 ], RAX			; accummulate in product, this is low-order 64 bits of result of mul
	   FFFFFF40
 0000014F  49/ FF CA						DEC				R10									; preserves carry flag
 00000152			@@:
 00000152  4A/ 11 94 D5						ADC				product [ R10 * 8 ], RDX			; high-order result of 64bit multiply, plus the carry (if any)
	   FFFFFF40
 0000015A  48/ 8D 14 25						LEA				RDX, [ 0 ]							; again, preserves carry flag
	   00000000
 00000162  73 05						JNC				@F									; if adding caused carry, propagate it, else next 
 00000164  49/ FF CA						DEC				R10									; propagating carry
 00000167  7D E9						JGE				@B
 00000169			@@:																	; next qword of multiplicand
 00000169  49/ FF CC						DEC				R12
 0000016C  66| 44/ 3B A5					CMP				R12W, candl							; Done with inner loop?
	   FFFFFF0C
 00000174  7D C0						JGE				@@multloop							; no, do it again
 00000176  4C/ 8D 24 25						LEA				R12, [ 7 ]							; yes, reset inner loop (multiplicand) index
	   00000007
 0000017E  49/ FF CB						DEC				R11									; decrement index for outer loop
 00000181  66| 44/ 3B 9D					CMP				R11W, plierl						; done with outer loop?
	   FFFFFF0E
 00000189  7D AB						JGE				@@multloop							; no, do it again with next qword of multiplier

				; finished: copy working product/overflow to callers product / overflow
 0000018B  48/ 8B 8D						MOV				RCX, savedRCX
	   FFFFFF30
 00000192  48/ 8D 55 80						LEA				RDX, product [ 8 * 8 ]
								Copy512			RCX, RDX							; copy working product to callers product
			     1		IF		__UseZ 
			     1					CheckAlign		RCX
			     2					LOCAL			ok
			     2		IF	__CheckAlign
			     2					TEST			RCX, 63							; Is specified param aligned 64?
			     2					JZ				??0006									; Yes, passes test, continue
			     2					INT				13									; No? fails, break (can substitute other exception handling)
			     2	??0006:
			     2		ENDIF
			     1					CheckAlign		RDX
			     2					LOCAL			ok
			     2		IF	__CheckAlign
			     2					TEST			RDX, 63							; Is specified param aligned 64?
			     2					JZ				??0007									; Yes, passes test, continue
			     2					INT				13									; No? fails, break (can substitute other exception handling)
			     2	??0007:
			     2		ENDIF
 00000196  62 61 FD 48/ 6F   1					VMOVDQA64		ZMM31, ZM_PTR [ RDX ]
	   3A
 0000019C  62 61 FD 48/ 7F   1					VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
			     1		ELSEIF	__UseY
			     1					CheckAlign		RCX
			     1					CheckAlign		RDX
			     1					VMOVDQA64		YMM4, YM_PTR [ RDX + 0 * 8 ]
			     1					VMOVDQA64		YM_PTR [ RCX ] [ 0 * 8 ], YMM4	; alternate ymm regs in case pipeline can execute next without waiting for this.
			     1					VMOVDQA64		YMM5, YM_PTR [ RDX ] [ 4 * 8 ]
			     1					VMOVDQA64		YM_PTR [ RCX ] [ 4 * 8 ], YMM5
			     1		ELSEIF	__UseX
			     1					CheckAlign		RCX
			     1					CheckAlign		RDX
			     1					MOVDQA			XMM4, XM_PTR [ RDX ] [ 0 * 8 ]
			     1					MOVDQA			XM_PTR [ RCX ] [ 0 * 8 ], XMM4
			     1					MOVDQA			XMM3, XM_PTR [ RDX ] [ 2 * 8 ]
			     1					MOVDQA			XM_PTR [ RCX ] [ 2 * 8 ], XMM3
			     1					MOVDQA			XMM4, XM_PTR [ RDX ] [ 4 * 8 ]
			     1					MOVDQA			XM_PTR [ RCX ] [ 4 * 8 ], XMM4
			     1					MOVDQA			XMM3, XM_PTR [ RDX ] [ 6 * 8 ]
			     1					MOVDQA			XM_PTR [ RCX ] [ 6 * 8 ], XMM3
			     1		ELSE
			     1					FOR				idx, < 0, 1, 2, 3, 4, 5, 6, 7 >
			     1					MOV				RAX, Q_PTR [ RDX ] [ idx * 8 ]
			     1					MOV				Q_PTR [ RCX ] [ idx * 8 ], RAX
			     1					ENDM
			     1		ENDIF
 000001A2  48/ 8B 8D						MOV				RCX, savedRDX
	   FFFFFF28
 000001A9  48/ 8D 95						LEA				RDX, product [ 0 ]
	   FFFFFF40
								Copy512			RCX, RDX							; copy working overflow to callers overflow
			     1		IF		__UseZ 
			     1					CheckAlign		RCX
			     2					LOCAL			ok
			     2		IF	__CheckAlign
			     2					TEST			RCX, 63							; Is specified param aligned 64?
			     2					JZ				??0008									; Yes, passes test, continue
			     2					INT				13									; No? fails, break (can substitute other exception handling)
			     2	??0008:
			     2		ENDIF
			     1					CheckAlign		RDX
			     2					LOCAL			ok
			     2		IF	__CheckAlign
			     2					TEST			RDX, 63							; Is specified param aligned 64?
			     2					JZ				??0009									; Yes, passes test, continue
			     2					INT				13									; No? fails, break (can substitute other exception handling)
			     2	??0009:
			     2		ENDIF
 000001B0  62 61 FD 48/ 6F   1					VMOVDQA64		ZMM31, ZM_PTR [ RDX ]
	   3A
 000001B6  62 61 FD 48/ 7F   1					VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
			     1		ELSEIF	__UseY
			     1					CheckAlign		RCX
			     1					CheckAlign		RDX
			     1					VMOVDQA64		YMM4, YM_PTR [ RDX + 0 * 8 ]
			     1					VMOVDQA64		YM_PTR [ RCX ] [ 0 * 8 ], YMM4	; alternate ymm regs in case pipeline can execute next without waiting for this.
			     1					VMOVDQA64		YMM5, YM_PTR [ RDX ] [ 4 * 8 ]
			     1					VMOVDQA64		YM_PTR [ RCX ] [ 4 * 8 ], YMM5
			     1		ELSEIF	__UseX
			     1					CheckAlign		RCX
			     1					CheckAlign		RDX
			     1					MOVDQA			XMM4, XM_PTR [ RDX ] [ 0 * 8 ]
			     1					MOVDQA			XM_PTR [ RCX ] [ 0 * 8 ], XMM4
			     1					MOVDQA			XMM3, XM_PTR [ RDX ] [ 2 * 8 ]
			     1					MOVDQA			XM_PTR [ RCX ] [ 2 * 8 ], XMM3
			     1					MOVDQA			XMM4, XM_PTR [ RDX ] [ 4 * 8 ]
			     1					MOVDQA			XM_PTR [ RCX ] [ 4 * 8 ], XMM4
			     1					MOVDQA			XMM3, XM_PTR [ RDX ] [ 6 * 8 ]
			     1					MOVDQA			XM_PTR [ RCX ] [ 6 * 8 ], XMM3
			     1		ELSE
			     1					FOR				idx, < 0, 1, 2, 3, 4, 5, 6, 7 >
			     1					MOV				RAX, Q_PTR [ RDX ] [ idx * 8 ]
			     1					MOV				Q_PTR [ RCX ] [ idx * 8 ], RAX
			     1					ENDM
			     1		ENDIF

				; restore regs, release frame, return
 000001BC			@@exit:			
 000001BC  4C/ 8B 95						MOV				R10, savedR10
	   FFFFFF20
 000001C3  4C/ 8B 9D						MOV				R11, savedR11
	   FFFFFF18
 000001CA  4C/ 8B A5						MOV				R12, savedR12						; restore any non-volitile regs used
	   FFFFFF10
								ReleaseFrame	savedRBP
			     1	;			release memory set up by createframe macro
			     1	;			restores RSP, and RBP to as-called values
			     1	;			after these instructions are executed, LOCAL variables can NOT be accessed
			     1	;			This needs to be done to restore the stack correctly, but can be done only once
			     1	;			Strongly suggest doing this just prior to return instruction, and that there is only one return instruction from the PROC
 000001D1  48/ 8B A5	     1					MOV				RSP, savedRBP					; restore unadjusted / unrounded (the as when called) stack pointer (eliminating LOCAL storage) 
	   FFFFFF38
 000001D8  5D		     1					POP				RBP									; restore base pointer for caller
 000001D9  48/ 33 C0						XOR				RAX, RAX							; return zero
								RET
 000001DC  C3		   *	    ret    00000h

				; zero callers product and overflow
 000001DD			@@zeroandexit:
 000001DD  48/ 8B 8D						MOV				RCX, savedRCX						; reload address of callers product
	   FFFFFF30
								Zero512			RCX									; zero it
			     1		IF		__UseZ
			     1					CheckAlign		RCX
			     2					LOCAL			ok
			     2		IF	__CheckAlign
			     2					TEST			RCX, 63							; Is specified param aligned 64?
			     2					JZ				??000A									; Yes, passes test, continue
			     2					INT				13									; No? fails, break (can substitute other exception handling)
			     2	??000A:
			     2		ENDIF
 000001E4  62 01 85 40/ EF   1					VPXORQ			ZMM31, ZMM31, ZMM31
	   FF
 000001EA  62 61 FD 48/ 7F   1					VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
			     1		ELSEIF	__UseY
			     1					CheckAlign		RCX
			     1					VPXORQ			YMM4, YMM4, YMM4
			     1					FOR				idx, < 0, 4 >
			     1					VMOVDQA64		YM_PTR [ RCX ] [ idx * 8 ], YMM4
			     1					ENDM
			     1		ELSEIF	__UseX
			     1					CheckAlign		RCX
			     1					PXOR			XMM4, XMM4
			     1					FOR				idx, < 0, 2, 4, 6 >
			     1					MOVDQA			XM_PTR [ RCX ] [ idx * 8 ], XMM4
			     1					ENDM		
			     1		ELSE
			     1					XOR				RAX, RAX
			     1					FOR				idx,  < 0, 1, 2, 3, 4, 5, 6, 7 >
			     1					MOV				Q_PTR [ RCX ] [ idx * 8 ], RAX
			     1					ENDM
			     1		ENDIF
 000001F0  48/ 8B 8D						MOV				RCX, savedRDX						; reload address of caller overflow
	   FFFFFF28
								Zero512			RCX									; zero it
			     1		IF		__UseZ
			     1					CheckAlign		RCX
			     2					LOCAL			ok
			     2		IF	__CheckAlign
			     2					TEST			RCX, 63							; Is specified param aligned 64?
			     2					JZ				??000B									; Yes, passes test, continue
			     2					INT				13									; No? fails, break (can substitute other exception handling)
			     2	??000B:
			     2		ENDIF
 000001F7  62 01 85 40/ EF   1					VPXORQ			ZMM31, ZMM31, ZMM31
	   FF
 000001FD  62 61 FD 48/ 7F   1					VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
			     1		ELSEIF	__UseY
			     1					CheckAlign		RCX
			     1					VPXORQ			YMM4, YMM4, YMM4
			     1					FOR				idx, < 0, 4 >
			     1					VMOVDQA64		YM_PTR [ RCX ] [ idx * 8 ], YMM4
			     1					ENDM
			     1		ELSEIF	__UseX
			     1					CheckAlign		RCX
			     1					PXOR			XMM4, XMM4
			     1					FOR				idx, < 0, 2, 4, 6 >
			     1					MOVDQA			XM_PTR [ RCX ] [ idx * 8 ], XMM4
			     1					ENDM		
			     1		ELSE
			     1					XOR				RAX, RAX
			     1					FOR				idx,  < 0, 1, 2, 3, 4, 5, 6, 7 >
			     1					MOV				Q_PTR [ RCX ] [ idx * 8 ], RAX
			     1					ENDM
			     1		ENDIF
 00000203  EB B7						JMP				@@exit

				; multiplying by 1: zero overflow, copy the non-one to the product
 00000205			@@copyandexit:
 00000205  48/ 8B 8D						MOV				RCX, savedRDX						; address of passed overflow
	   FFFFFF28
								Zero512			RCX 								; zero it
			     1		IF		__UseZ
			     1					CheckAlign		RCX
			     2					LOCAL			ok
			     2		IF	__CheckAlign
			     2					TEST			RCX, 63							; Is specified param aligned 64?
			     2					JZ				??000C									; Yes, passes test, continue
			     2					INT				13									; No? fails, break (can substitute other exception handling)
			     2	??000C:
			     2		ENDIF
 0000020C  62 01 85 40/ EF   1					VPXORQ			ZMM31, ZMM31, ZMM31
	   FF
 00000212  62 61 FD 48/ 7F   1					VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
			     1		ELSEIF	__UseY
			     1					CheckAlign		RCX
			     1					VPXORQ			YMM4, YMM4, YMM4
			     1					FOR				idx, < 0, 4 >
			     1					VMOVDQA64		YM_PTR [ RCX ] [ idx * 8 ], YMM4
			     1					ENDM
			     1		ELSEIF	__UseX
			     1					CheckAlign		RCX
			     1					PXOR			XMM4, XMM4
			     1					FOR				idx, < 0, 2, 4, 6 >
			     1					MOVDQA			XM_PTR [ RCX ] [ idx * 8 ], XMM4
			     1					ENDM		
			     1		ELSE
			     1					XOR				RAX, RAX
			     1					FOR				idx,  < 0, 1, 2, 3, 4, 5, 6, 7 >
			     1					MOV				Q_PTR [ RCX ] [ idx * 8 ], RAX
			     1					ENDM
			     1		ENDIF
 00000218  48/ 8B 8D						MOV				RCX, savedRCX						; copy (whichever: multiplier or multiplicand) to callers product
	   FFFFFF30
								Copy512			RCX, RDX							; RDX "passed" here from whomever jumped here (either &multiplier, or &multiplicand in RDX)
			     1		IF		__UseZ 
			     1					CheckAlign		RCX
			     2					LOCAL			ok
			     2		IF	__CheckAlign
			     2					TEST			RCX, 63							; Is specified param aligned 64?
			     2					JZ				??000D									; Yes, passes test, continue
			     2					INT				13									; No? fails, break (can substitute other exception handling)
			     2	??000D:
			     2		ENDIF
			     1					CheckAlign		RDX
			     2					LOCAL			ok
			     2		IF	__CheckAlign
			     2					TEST			RDX, 63							; Is specified param aligned 64?
			     2					JZ				??000E									; Yes, passes test, continue
			     2					INT				13									; No? fails, break (can substitute other exception handling)
			     2	??000E:
			     2		ENDIF
 0000021F  62 61 FD 48/ 6F   1					VMOVDQA64		ZMM31, ZM_PTR [ RDX ]
	   3A
 00000225  62 61 FD 48/ 7F   1					VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
			     1		ELSEIF	__UseY
			     1					CheckAlign		RCX
			     1					CheckAlign		RDX
			     1					VMOVDQA64		YMM4, YM_PTR [ RDX + 0 * 8 ]
			     1					VMOVDQA64		YM_PTR [ RCX ] [ 0 * 8 ], YMM4	; alternate ymm regs in case pipeline can execute next without waiting for this.
			     1					VMOVDQA64		YMM5, YM_PTR [ RDX ] [ 4 * 8 ]
			     1					VMOVDQA64		YM_PTR [ RCX ] [ 4 * 8 ], YMM5
			     1		ELSEIF	__UseX
			     1					CheckAlign		RCX
			     1					CheckAlign		RDX
			     1					MOVDQA			XMM4, XM_PTR [ RDX ] [ 0 * 8 ]
			     1					MOVDQA			XM_PTR [ RCX ] [ 0 * 8 ], XMM4
			     1					MOVDQA			XMM3, XM_PTR [ RDX ] [ 2 * 8 ]
			     1					MOVDQA			XM_PTR [ RCX ] [ 2 * 8 ], XMM3
			     1					MOVDQA			XMM4, XM_PTR [ RDX ] [ 4 * 8 ]
			     1					MOVDQA			XM_PTR [ RCX ] [ 4 * 8 ], XMM4
			     1					MOVDQA			XMM3, XM_PTR [ RDX ] [ 6 * 8 ]
			     1					MOVDQA			XM_PTR [ RCX ] [ 6 * 8 ], XMM3
			     1		ELSE
			     1					FOR				idx, < 0, 1, 2, 3, 4, 5, 6, 7 >
			     1					MOV				RAX, Q_PTR [ RDX ] [ idx * 8 ]
			     1					MOV				Q_PTR [ RCX ] [ idx * 8 ], RAX
			     1					ENDM
			     1		ENDIF
 0000022B  EB 8F						JMP				@@exit								; and exit
 0000022D			mult_u			ENDP

				;
				;--------------------------------------------------------------------------------------------------------------------------------------------------------------
				;			EXTERNDEF		mult_uT64:PROC				;	void mult_uT64( u64* product, u64* overflow, u64* multiplicand, u64 multiplier);
				;			mult_uT64		-	multiply 512 bit multiplicand by 64 bit multiplier, giving 512 product, 64 bit overflow
				;			Prototype:		-	void mult_uT64( u64* product, u64* overflow, u64* multiplicand, u64 multiplier);
				;			product			-	Address of 8 QWORDS to store resulting product (in RCX)
				;			overflow		-	Address of QWORD for resulting overflow (in RDX)
				;			multiplicand	-	Address of 8 QWORDS multiplicand (in R8)
				;			multiplier		-	multiplier QWORD (in R9)
				;			returns			-	nothing (0)

								OPTION			PROLOGUE:none
								OPTION			EPILOGUE:none
 0000022D			mult_uT64		PROC			PUBLIC

				; Check passed parameters alignment				
								CheckAlign		RCX									; (out) Product
			     1					LOCAL			ok
			     1		IF	__CheckAlign
			     1					TEST			RCX, 63							; Is specified param aligned 64?
			     1					JZ				??000F									; Yes, passes test, continue
			     1					INT				13									; No? fails, break (can substitute other exception handling)
			     1	??000F:
			     1		ENDIF
								CheckAlign		R8									; (in) Multiplicand
			     1					LOCAL			ok
			     1		IF	__CheckAlign
			     1					TEST			R8, 63							; Is specified param aligned 64?
			     1					JZ				??0010									; Yes, passes test, continue
			     1					INT				13									; No? fails, break (can substitute other exception handling)
			     1	??0010:
			     1		ENDIF

				; caller might be doing multiply 'in-place', so need to save the original multiplicand, prior to clearing callers product (A = A * x), or (A *= x)
								FOR				idx, < 0, 1, 2, 3, 4, 5, 6, 7 >
								PUSH			Q_PTR [ R8 ] [ idx * 8 ]
								ENDM
 0000022D  41/ FF 30	     1					PUSH			Q_PTR [ R8 ] [ 0 * 8 ]
 00000230  41/ FF 70 08	     1					PUSH			Q_PTR [ R8 ] [ 1 * 8 ]
 00000234  41/ FF 70 10	     1					PUSH			Q_PTR [ R8 ] [ 2 * 8 ]
 00000238  41/ FF 70 18	     1					PUSH			Q_PTR [ R8 ] [ 3 * 8 ]
 0000023C  41/ FF 70 20	     1					PUSH			Q_PTR [ R8 ] [ 4 * 8 ]
 00000240  41/ FF 70 28	     1					PUSH			Q_PTR [ R8 ] [ 5 * 8 ]
 00000244  41/ FF 70 30	     1					PUSH			Q_PTR [ R8 ] [ 6 * 8 ]
 00000248  41/ FF 70 38	     1					PUSH			Q_PTR [ R8 ] [ 7 * 8 ]

				; clear callers product and overflow
				;	Note: if caller used multiplicand and product as the same variable (memory space),
				;	this would wipe the multiplicand. Hence the saving of the multiplicand on the stack. (above)
 0000024C  48/ 33 C0						XOR				RAX, RAX
								Zero512Q		RCX		   							; clear callers product (multiply uses an addition with carry, so it needs to start zeroed)
 0000024F  48/ 33 C0	     1					XOR				RAX, RAX
			     1					FOR				idx,  < 0, 1, 2, 3, 4, 5, 6, 7 >
			     1					MOV				Q_PTR [ RCX ] [ idx * 8 ], RAX
			     1					ENDM
 00000252  48/ 89 01	     2					MOV				Q_PTR [ RCX ] [ 0 * 8 ], RAX
 00000255  48/ 89 41 08	     2					MOV				Q_PTR [ RCX ] [ 1 * 8 ], RAX
 00000259  48/ 89 41 10	     2					MOV				Q_PTR [ RCX ] [ 2 * 8 ], RAX
 0000025D  48/ 89 41 18	     2					MOV				Q_PTR [ RCX ] [ 3 * 8 ], RAX
 00000261  48/ 89 41 20	     2					MOV				Q_PTR [ RCX ] [ 4 * 8 ], RAX
 00000265  48/ 89 41 28	     2					MOV				Q_PTR [ RCX ] [ 5 * 8 ], RAX
 00000269  48/ 89 41 30	     2					MOV				Q_PTR [ RCX ] [ 6 * 8 ], RAX
 0000026D  48/ 89 41 38	     2					MOV				Q_PTR [ RCX ] [ 7 * 8 ], RAX
			     1	
 00000271  48/ 89 02						MOV				Q_PTR [ RDX ], RAX					; clear callers overflow
 00000274  4C/ 8B D2		 				MOV				R10, RDX							; RDX (pointer to callers overflow) gets used in the MUL: save it in R10

				; FOR EACH index of 7 thru 1 (omiting 0): fetch (pop) qword of multiplicand, multiply, add 128 bit result (RAX, RDX) to running working product
								FOR				idx, < 7, 6, 5, 4, 3, 2, 1 >		; Note: this is not a 'real' for, this is a macro that generates an unwound loop
								POP				RAX									; multiplicand [ idx ] qword -> RAX
								MUL				R9									; times multiplier -> RAX, RDX
								ADD				Q_PTR [ RCX ] [ idx * 8 ], RAX		; add RAX to working product [ idx ] qword
								ADC				Q_PTR [ RCX ] [ (idx - 1) * 8 ], RDX	; and add RDX with carry to [ idx - 1 ] qword of working product
								ENDM
 00000277  58		     1					POP				RAX									; multiplicand [ idx ] qword -> RAX
 00000278  49/ F7 E1	     1					MUL				R9									; times multiplier -> RAX, RDX
 0000027B  48/ 01 41 38	     1					ADD				Q_PTR [ RCX ] [ 7 * 8 ], RAX		; add RAX to working product [ idx ] qword
 0000027F  48/ 11 51 30	     1					ADC				Q_PTR [ RCX ] [ (7 - 1) * 8 ], RDX	; and add RDX with carry to [ idx - 1 ] qword of working product
 00000283  58		     1					POP				RAX									; multiplicand [ idx ] qword -> RAX
 00000284  49/ F7 E1	     1					MUL				R9									; times multiplier -> RAX, RDX
 00000287  48/ 01 41 30	     1					ADD				Q_PTR [ RCX ] [ 6 * 8 ], RAX		; add RAX to working product [ idx ] qword
 0000028B  48/ 11 51 28	     1					ADC				Q_PTR [ RCX ] [ (6 - 1) * 8 ], RDX	; and add RDX with carry to [ idx - 1 ] qword of working product
 0000028F  58		     1					POP				RAX									; multiplicand [ idx ] qword -> RAX
 00000290  49/ F7 E1	     1					MUL				R9									; times multiplier -> RAX, RDX
 00000293  48/ 01 41 28	     1					ADD				Q_PTR [ RCX ] [ 5 * 8 ], RAX		; add RAX to working product [ idx ] qword
 00000297  48/ 11 51 20	     1					ADC				Q_PTR [ RCX ] [ (5 - 1) * 8 ], RDX	; and add RDX with carry to [ idx - 1 ] qword of working product
 0000029B  58		     1					POP				RAX									; multiplicand [ idx ] qword -> RAX
 0000029C  49/ F7 E1	     1					MUL				R9									; times multiplier -> RAX, RDX
 0000029F  48/ 01 41 20	     1					ADD				Q_PTR [ RCX ] [ 4 * 8 ], RAX		; add RAX to working product [ idx ] qword
 000002A3  48/ 11 51 18	     1					ADC				Q_PTR [ RCX ] [ (4 - 1) * 8 ], RDX	; and add RDX with carry to [ idx - 1 ] qword of working product
 000002A7  58		     1					POP				RAX									; multiplicand [ idx ] qword -> RAX
 000002A8  49/ F7 E1	     1					MUL				R9									; times multiplier -> RAX, RDX
 000002AB  48/ 01 41 18	     1					ADD				Q_PTR [ RCX ] [ 3 * 8 ], RAX		; add RAX to working product [ idx ] qword
 000002AF  48/ 11 51 10	     1					ADC				Q_PTR [ RCX ] [ (3 - 1) * 8 ], RDX	; and add RDX with carry to [ idx - 1 ] qword of working product
 000002B3  58		     1					POP				RAX									; multiplicand [ idx ] qword -> RAX
 000002B4  49/ F7 E1	     1					MUL				R9									; times multiplier -> RAX, RDX
 000002B7  48/ 01 41 10	     1					ADD				Q_PTR [ RCX ] [ 2 * 8 ], RAX		; add RAX to working product [ idx ] qword
 000002BB  48/ 11 51 08	     1					ADC				Q_PTR [ RCX ] [ (2 - 1) * 8 ], RDX	; and add RDX with carry to [ idx - 1 ] qword of working product
 000002BF  58		     1					POP				RAX									; multiplicand [ idx ] qword -> RAX
 000002C0  49/ F7 E1	     1					MUL				R9									; times multiplier -> RAX, RDX
 000002C3  48/ 01 41 08	     1					ADD				Q_PTR [ RCX ] [ 1 * 8 ], RAX		; add RAX to working product [ idx ] qword
 000002C7  48/ 11 11	     1					ADC				Q_PTR [ RCX ] [ (1 - 1) * 8 ], RDX	; and add RDX with carry to [ idx - 1 ] qword of working product

				; Most significant (idx=0), the high order result of the multiply in RDX, goes to the overflow of the caller
 000002CA  58							POP				RAX
 000002CB  49/ F7 E1						MUL				R9
 000002CE  48/ 01 01						ADD				Q_PTR [ RCX ] [ 0 * 8 ], RAX
 000002D1  49/ 11 12						ADC				Q_PTR [ R10 ], RDX					; last qword overflow is also the operation overflow
 000002D4  48/ 33 C0						XOR				RAX, RAX							; return zero
 000002D7  C3							RET
 000002D8			mult_uT64		ENDP

				;
				;--------------------------------------------------------------------------------------------------------------------------------------------------------------
				;			EXTERNDEF		div_u:PROC					; s16 div_u( u64* quotient, u64* remainder, u64* dividend, u64* divisor)
				;			div_u			-	divide 512 bit dividend by 512 bit divisor, giving 512 bit quotient and remainder
				;			Prototype:		-	s16 div_u( u64* quotient, u64* remainder, u64* dividend, u64* divisor);
				;			quotient		-	Address of 8 QWORDS to store resulting quotient (in RCX)
				;			remainder		-	Address of 8 QWORDs for resulting remainder (in RDX)
				;			dividend		-	Address of 8 QWORDS dividend (in R8)
				;			divisor			-	Address of 8 QWORDs divisor (in R9)
				;			returns			-	0 for success, -1 for attempt to divide by zero

								OPTION			PROLOGUE:none
								OPTION			EPILOGUE:none
 000002D8			div_u			PROC			PUBLIC

								LOCAL			padding1 [ 16 ] : QWORD
								LOCAL			currnumerator [ 16 ] : QWORD
								LOCAL			qdiv [ 16 ] : QWORD, quotient [ 8 ] : QWORD, normdivisor [ 8 ] : QWORD
								LOCAL			savedRCX : QWORD, savedRDX : QWORD, savedR8 : QWORD, savedR9 : QWORD
								LOCAL			savedR10 : QWORD, savedR11 : QWORD, savedR12 : QWORD, savedRBP : QWORD
								LOCAL			qHat : QWORD, rHat : QWORD,	nDiv : QWORD, addbackRDX : QWORD, addbackR11 : QWORD
								LOCAL			normf : WORD, jIdx : WORD, mIdx : WORD, nIdx : WORD, mDim : WORD, nDim : Word			
								LOCAL			padding2 [ 16 ] : QWORD
 = padding2 + 64 - padding1	div_oset		EQU				padding2 + 64 - padding1

								CreateFrame		360h, savedRBP
			     1	;
			     1	;			set up frame to save regs, and to create aligned working memory for scratch variables
			     1	;			argsize is the amount of space to be made on the stack for locals and padding (at least 40h on each end)
			     1	;			argsavename is the name of the variable, within the LOCAL declarations, QWORD, for the RBP to be saved, and restored from
			     1	;			No prologue, epilogue should be used. LOCAL declarations immediately after PROC statement, then this macro
			     1	;			Note: LOCAL variables will START on a 64 byte aligned address space. Your order and sizes of your variables will be in sequence as declared
			     1	;			and thus provide no assurance of alignment other than what your declarations imply. In other words, declaring a byte var at the beginning
			     1	;			throws everyting after that off by a byte. OK, not exacly, the asm will align by data type (eg, QWORD on 8 byte), but there is no way to get back
			     1	;			to 64 byte alignment, so declare those first, then QWORD, then DWORD, etc. Or, count your declares such that you get what/where you want.
			     1	;			example:
			     1	;
			     1	;somename	PROC
			     1	;			LOCAL		padding1[8]:QWORD				; warning: do not touch, initialize, or use padding. (on either end)
			     1	;			LOCAL		somelocal:ZMMWORD				; a 512 bit, 64 byte aligned var, ready for aligned load/store into ZMM (AVX2) register
			     1	;			LOCAL		some local variable declarions, some more, and some more
			     1	;			LOCAL		and some more
			     1	;			LOCAL		savedRBP:QWORD					; you might have other reg save space as well
			     1	;			LOCAL		padding2[8]:QWORD				; after your return statement, before ENDP, might LEA padding1 and padding2 to eliminate warning (unreferenced variables)
			     1	;			CREATEFRAME 200h, savedRBP					; (200h assumes 118h in those "some local variable declarations", adjust as necessary)
			     1	;
			     1	;			Use only one return from the PROC, and immediately before return, use ReleaseFrame macro, giving name of where RBP is saved
			     1	;
 000002D8  55		     1					PUSH			RBP
 000002D9  48/ 8B EC	     1					MOV				RBP, RSP
 000002DC  48/ 83 E4 F8	     1					AND				RSP, -8
 000002E0  48/ 81 EC	     1					SUB				RSP, 360h + 64					; make a gap between old stack pointer and current stack pointer for use as "LOCAL", adjust size if changes made to locals
	   000003A0
 000002E7  48/ C7 C0	     1					MOV				RAX, -64							; Round it (down), to make it, and local vars, align on 64 byte address (necessary for aligned ZMM load/store)
	   FFFFFFC0
 000002EE  48/ 23 C5	     1					AND				RAX, RBP							; note: "padding" variables must not be used. They are in areas where we have just rounded down, or in stack space for those we call
 000002F1  48/ 95	     1					XCHG			RAX, RBP							; RBP now points to top of gap between old stack pointer and current stack pointer, aligned on 64
 000002F3  48/ 89 85	     1					MOV				savedRBP, RAX					; LOCAL variables now usable, using negative offsets from the new RBP value. Must restore RBP, RSP at exit (Use RELEASEFRAME)
	   FFFFFDC0
 000002FA  48/ 89 8D						MOV				savedRCX, RCX
	   FFFFFDF8
 00000301  48/ 89 95						MOV				savedRDX, RDX
	   FFFFFDF0
 00000308  4C/ 89 85						MOV				savedR8, R8
	   FFFFFDE8
 0000030F  4C/ 89 8D						MOV				savedR9, R9
	   FFFFFDE0
 00000316  4C/ 89 95						MOV				savedR10, R10
	   FFFFFDD8
 0000031D  4C/ 89 9D						MOV				savedR11, R11
	   FFFFFDD0
 00000324  4C/ 89 A5						MOV				savedR12, R12
	   FFFFFDC8

								CheckAlign		RCX									; (out) Quotient
			     1					LOCAL			ok
			     1		IF	__CheckAlign
			     1					TEST			RCX, 63							; Is specified param aligned 64?
			     1					JZ				??0011									; Yes, passes test, continue
			     1					INT				13									; No? fails, break (can substitute other exception handling)
			     1	??0011:
			     1		ENDIF
								CheckAlign		RDX									; (out) Remainder
			     1					LOCAL			ok
			     1		IF	__CheckAlign
			     1					TEST			RDX, 63							; Is specified param aligned 64?
			     1					JZ				??0012									; Yes, passes test, continue
			     1					INT				13									; No? fails, break (can substitute other exception handling)
			     1	??0012:
			     1		ENDIF
								CheckAlign		R8									; (in) Dividend
			     1					LOCAL			ok
			     1		IF	__CheckAlign
			     1					TEST			R8, 63							; Is specified param aligned 64?
			     1					JZ				??0013									; Yes, passes test, continue
			     1					INT				13									; No? fails, break (can substitute other exception handling)
			     1	??0013:
			     1		ENDIF
								CheckAlign		R9									; (in) Divisor
			     1					LOCAL			ok
			     1		IF	__CheckAlign
			     1					TEST			R9, 63							; Is specified param aligned 64?
			     1					JZ				??0014									; Yes, passes test, continue
			     1					INT				13									; No? fails, break (can substitute other exception handling)
			     1	??0014:
			     1		ENDIF

				; Initialize
								Zero512			RCX									; zero callers quotient
			     1		IF		__UseZ
			     1					CheckAlign		RCX
			     2					LOCAL			ok
			     2		IF	__CheckAlign
			     2					TEST			RCX, 63							; Is specified param aligned 64?
			     2					JZ				??0015									; Yes, passes test, continue
			     2					INT				13									; No? fails, break (can substitute other exception handling)
			     2	??0015:
			     2		ENDIF
 0000032B  62 01 85 40/ EF   1					VPXORQ			ZMM31, ZMM31, ZMM31
	   FF
 00000331  62 61 FD 48/ 7F   1					VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
			     1		ELSEIF	__UseY
			     1					CheckAlign		RCX
			     1					VPXORQ			YMM4, YMM4, YMM4
			     1					FOR				idx, < 0, 4 >
			     1					VMOVDQA64		YM_PTR [ RCX ] [ idx * 8 ], YMM4
			     1					ENDM
			     1		ELSEIF	__UseX
			     1					CheckAlign		RCX
			     1					PXOR			XMM4, XMM4
			     1					FOR				idx, < 0, 2, 4, 6 >
			     1					MOVDQA			XM_PTR [ RCX ] [ idx * 8 ], XMM4
			     1					ENDM		
			     1		ELSE
			     1					XOR				RAX, RAX
			     1					FOR				idx,  < 0, 1, 2, 3, 4, 5, 6, 7 >
			     1					MOV				Q_PTR [ RCX ] [ idx * 8 ], RAX
			     1					ENDM
			     1		ENDIF
								Zero512			RDX									; zero callers remainder
			     1		IF		__UseZ
			     1					CheckAlign		RDX
			     2					LOCAL			ok
			     2		IF	__CheckAlign
			     2					TEST			RDX, 63							; Is specified param aligned 64?
			     2					JZ				??0016									; Yes, passes test, continue
			     2					INT				13									; No? fails, break (can substitute other exception handling)
			     2	??0016:
			     2		ENDIF
 00000337  62 01 85 40/ EF   1					VPXORQ			ZMM31, ZMM31, ZMM31
	   FF
 0000033D  62 61 FD 48/ 7F   1					VMOVDQA64		ZM_PTR [ RDX ], ZMM31
	   3A
			     1		ELSEIF	__UseY
			     1					CheckAlign		RDX
			     1					VPXORQ			YMM4, YMM4, YMM4
			     1					FOR				idx, < 0, 4 >
			     1					VMOVDQA64		YM_PTR [ RDX ] [ idx * 8 ], YMM4
			     1					ENDM
			     1		ELSEIF	__UseX
			     1					CheckAlign		RDX
			     1					PXOR			XMM4, XMM4
			     1					FOR				idx, < 0, 2, 4, 6 >
			     1					MOVDQA			XM_PTR [ RDX ] [ idx * 8 ], XMM4
			     1					ENDM		
			     1		ELSE
			     1					XOR				RAX, RAX
			     1					FOR				idx,  < 0, 1, 2, 3, 4, 5, 6, 7 >
			     1					MOV				Q_PTR [ RDX ] [ idx * 8 ], RAX
			     1					ENDM
			     1		ENDIF
 00000343  48/ 8D 8D						LEA				RCX, quotient
	   FFFFFE40
								Zero512			RCX									; zero working quotient
			     1		IF		__UseZ
			     1					CheckAlign		RCX
			     2					LOCAL			ok
			     2		IF	__CheckAlign
			     2					TEST			RCX, 63							; Is specified param aligned 64?
			     2					JZ				??0017									; Yes, passes test, continue
			     2					INT				13									; No? fails, break (can substitute other exception handling)
			     2	??0017:
			     2		ENDIF
 0000034A  62 01 85 40/ EF   1					VPXORQ			ZMM31, ZMM31, ZMM31
	   FF
 00000350  62 61 FD 48/ 7F   1					VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
			     1		ELSEIF	__UseY
			     1					CheckAlign		RCX
			     1					VPXORQ			YMM4, YMM4, YMM4
			     1					FOR				idx, < 0, 4 >
			     1					VMOVDQA64		YM_PTR [ RCX ] [ idx * 8 ], YMM4
			     1					ENDM
			     1		ELSEIF	__UseX
			     1					CheckAlign		RCX
			     1					PXOR			XMM4, XMM4
			     1					FOR				idx, < 0, 2, 4, 6 >
			     1					MOVDQA			XM_PTR [ RCX ] [ idx * 8 ], XMM4
			     1					ENDM		
			     1		ELSE
			     1					XOR				RAX, RAX
			     1					FOR				idx,  < 0, 1, 2, 3, 4, 5, 6, 7 >
			     1					MOV				Q_PTR [ RCX ] [ idx * 8 ], RAX
			     1					ENDM
			     1		ENDIF

				 ; Examine divisor
 00000356  49/ 8B C9						MOV				RCX, R9								; divisor
 00000359  E8 00000000 E					CALL			msb_u								; get most significant bit
 0000035E  66| 83 F8 FF						CMP				AX, -1								; msb < 0? 
 00000362  0F 84 0000029A					JE				divbyzero							; divisor is zero, abort
 00000368  66| 83 F8 40						CMP				AX, 64								; divisor only one 64-bit word?
 0000036C  EB 44						JMP				mbynDiv								; no, do divide of m digit by n digit				*** NOTE: restore JGE after testing (this allows full div on single word)

				;	divide of m 64-bit qwords by one 64 bit qword divisor, use the quicker divide routine (div_uT64), and return
 0000036E  48/ 8B 8D						MOV				RCX, savedRCX						; set up parms for call to div by 64bit: RCX - addr of quotient
	   FFFFFDF8
 00000375  48/ 8B 95						MOV				RDX, savedRDX						; RDX - addr of remainder
	   FFFFFDF0
 0000037C  4C/ 8B 85						MOV				R8, savedR8							; R8 - addr of dividend
	   FFFFFDE8
 00000383  48/ 8B 85						MOV				RAX, savedR9
	   FFFFFDE0
 0000038A  4C/ 8B 48 38						MOV				R9, Q_PTR [ RAX ] [ 7 * 8 ]			; R9 - value of 64 bit divisor
 0000038E  E8 000002BB						CALL			div_uT64
 00000393  48/ 8B 95						MOV				RDX, savedRDX						; move 64 bit remainder to last word of 8 word remainder
	   FFFFFDF0
 0000039A  48/ 8B 0A						MOV				RCX, Q_PTR [ RDX ]					; get the one qword remainder
								Zero512			RDX									; clear the 8 qword callers remainder
			     1		IF		__UseZ
			     1					CheckAlign		RDX
			     2					LOCAL			ok
			     2		IF	__CheckAlign
			     2					TEST			RDX, 63							; Is specified param aligned 64?
			     2					JZ				??0018									; Yes, passes test, continue
			     2					INT				13									; No? fails, break (can substitute other exception handling)
			     2	??0018:
			     2		ENDIF
 0000039D  62 01 85 40/ EF   1					VPXORQ			ZMM31, ZMM31, ZMM31
	   FF
 000003A3  62 61 FD 48/ 7F   1					VMOVDQA64		ZM_PTR [ RDX ], ZMM31
	   3A
			     1		ELSEIF	__UseY
			     1					CheckAlign		RDX
			     1					VPXORQ			YMM4, YMM4, YMM4
			     1					FOR				idx, < 0, 4 >
			     1					VMOVDQA64		YM_PTR [ RDX ] [ idx * 8 ], YMM4
			     1					ENDM
			     1		ELSEIF	__UseX
			     1					CheckAlign		RDX
			     1					PXOR			XMM4, XMM4
			     1					FOR				idx, < 0, 2, 4, 6 >
			     1					MOVDQA			XM_PTR [ RDX ] [ idx * 8 ], XMM4
			     1					ENDM		
			     1		ELSE
			     1					XOR				RAX, RAX
			     1					FOR				idx,  < 0, 1, 2, 3, 4, 5, 6, 7 >
			     1					MOV				Q_PTR [ RDX ] [ idx * 8 ], RAX
			     1					ENDM
			     1		ENDIF
 000003A9  48/ 89 4A 38						MOV				Q_PTR [ RDX ] [ 7 * 8 ], RCX		; put the one qword remainder in the least significant qword of the callers remainder
 000003AD  E9 00000213						JMP				cleanupret

				;
				; Going to divide an 'm' digit dividend (u), by an 'n' digit divisor (v)
				;	See Knuth, The Art of Computer Programming, Volume 2, Algorithm D, Pages 272-278
				;	Notes: This is much like the long division done by hand as taught in school, but instead of digits being 0 to 9, they are 0 to 2^64, or whole 64 bit qwords.
				;	Knuth suggests any base can work, but suggests the selection of one more 'natural' to the machine. Since x64 machines have a 128-bit by 64 bit divide instruction,
				;	The selected base 'b' is one whole qword, or 64 bits, or 2^64. As in manual division, the first non-obvious step is to 'align' the leading bits of the divisor. Knuth calls this
				;	'normalization'. It requires determining the dimensions of the variables, and the most significant bit of the divisor. Both variables are then shifted (left) to get the 
				;	most significant bit of the divisor into the most significant bit of the qword in which it is found. This makes the leading digit of the divisor greter than or equal to 2^64 / 2,
				;	making the first division meaningful. The dividend must then be shifted the same amount.
				;	When the division is completed, no action needs to be taken on the quotient - it will be correct without shifting back (the shifts of dividend and divisor cancel each other out).
				;	The remainder will need to be shifted (right) to "de-normalize" for the return value.
				;	This process yields the dimensions of the variables: the number of qwords in each: 'm' for dividend, 'n' for divisor. Midx, and Nidx are the starting indexes, reflecting m and n.
				;
 000003B2			mbynDiv:
 000003B2  66| 89 85						MOV				nDim, AX							; still have divisor msb in AX
	   FFFFFD8C
 000003B9  66| C1 AD						SHR				nDim, 6								; div msb by 64 to get msq (most significant qword) aka 'n' (zero based Nr qwords)
	   FFFFFD8C 06
 000003C1  66| B9 0007						MOV				CX, 7
 000003C5  66| 2B 8D						SUB				CX, nDim
	   FFFFFD8C
 000003CC  66| FF 85						INC				nDim
	   FFFFFD8C
 000003D3  66| 89 8D						MOV				nIdx, CX							; nIdx now 7 - msb of leading word: aka idx to first qword
	   FFFFFD90
								;
 000003DA  66| 89 85						MOV				normf, AX
	   FFFFFD96
 000003E1  66| 83 A5						AND				normf, 63
	   FFFFFD96 3F
 000003E9  66| B8 003F						MOV				AX, 63
 000003ED  66| 2B 85						SUB				AX, normf							; Nr bits to get leading divisor bit to msb saved at normf
	   FFFFFD96
 000003F4  66| 89 85						MOV				normf, AX
	   FFFFFD96
																					
				;	Notes: (continued from above) The mIdx and nIdx are indexes pointing the the leading non-zero qword in dividend and divisor respectively.
				;	jIDx is the number of non-zero qwords in the dividend (after normalization shift). It starts at first non-zero qword

				; Step D1: Normalize	
								
 000003FB  48/ 8B 95						MOV				RDX, savedR9						; callers divisor
	   FFFFFDE0
 00000402  48/ 8D 8D						LEA				RCX, normdivisor					; local copy of divisor, normalized
	   FFFFFE00
 00000409  66| 44/ 8B 85					MOV				R8W, normf
	   FFFFFD96
 00000411  E8 00000000 E					CALL			shl_u								; by shifting until MSB is high bit								
								;
 00000416  48/ 8B 95						MOV				RDX, savedR8						; callers dividend
	   FFFFFDE8
 0000041D  48/ 8D 8D						LEA				RCX, currnumerator [ 8 * 8 ]		; starting numerator is the normalized supplied dividend
	   FFFFFF40
 00000424  66| 44/ 8B 85					MOV				R8W, normf							; shifted the same Nr bits as it took to make divisor msb the leading bit
	   FFFFFD96
 0000042C  E8 00000000 E					CALL			shl_u
 00000431  48/ 8D 95						LEA				RDX, currnumerator					; zero first eight words of working enumerator
	   FFFFFF00
								Zero512			RDX
			     1		IF		__UseZ
			     1					CheckAlign		RDX
			     2					LOCAL			ok
			     2		IF	__CheckAlign
			     2					TEST			RDX, 63							; Is specified param aligned 64?
			     2					JZ				??0019									; Yes, passes test, continue
			     2					INT				13									; No? fails, break (can substitute other exception handling)
			     2	??0019:
			     2		ENDIF
 00000438  62 01 85 40/ EF   1					VPXORQ			ZMM31, ZMM31, ZMM31
	   FF
 0000043E  62 61 FD 48/ 7F   1					VMOVDQA64		ZM_PTR [ RDX ], ZMM31
	   3A
			     1		ELSEIF	__UseY
			     1					CheckAlign		RDX
			     1					VPXORQ			YMM4, YMM4, YMM4
			     1					FOR				idx, < 0, 4 >
			     1					VMOVDQA64		YM_PTR [ RDX ] [ idx * 8 ], YMM4
			     1					ENDM
			     1		ELSEIF	__UseX
			     1					CheckAlign		RDX
			     1					PXOR			XMM4, XMM4
			     1					FOR				idx, < 0, 2, 4, 6 >
			     1					MOVDQA			XM_PTR [ RDX ] [ idx * 8 ], XMM4
			     1					ENDM		
			     1		ELSE
			     1					XOR				RAX, RAX
			     1					FOR				idx,  < 0, 1, 2, 3, 4, 5, 6, 7 >
			     1					MOV				Q_PTR [ RDX ] [ idx * 8 ], RAX
			     1					ENDM
			     1		ENDIF
 00000444  48/ 8B 95						MOV				RDX, savedR8
	   FFFFFDE8
 0000044B  48/ 8B 02						MOV				RAX, Q_PTR [ RDX ]					; if numerator has 8 qwords (dimM = 7), then the shift just lost us high order bits, get them			
 0000044E  66| B9 003F						MOV				CX, 63								; shift first qword of dividend right 
 00000452  66| 2B 8D						SUB				CX, normf							; by 63 minus Nr bits shifted left
	   FFFFFD96
 00000459  48/ D3 E8						SHR				RAX, CL								; eliminating all bit the bits we lost
 0000045C  4C/ 8D A5						LEA				R12, currnumerator [ 7 * 8 ]
	   FFFFFF38
 00000463  49/ 89 04 24						MOV				[ R12 ], RAX						; store them at m + 1 (the word 'before' the other up to eight qwords)
								;
 00000467  48/ 33 C0						XOR				RAX, RAX
 0000046A  48/ C7 C1						MOV				RCX, -1
	   FFFFFFFF
 00000471			@@:
 00000471  49/ 85 0C C4						TEST			Q_PTR [ R12 ] [ RAX * 8 ], RCX		; R12 currently has addr of begining of enumerator, 
 00000475  75 09						JNZ				@F
 00000477  48/ FF C0						INC				RAX
 0000047A  48/ 83 F8 08						CMP				RAX, 8
 0000047E  7E F1						JLE				@B
 00000480			@@:
 00000480  4D/ 8D 24 C4						LEA				R12, Q_PTR [ R12 ] [ RAX * 8 ]		; revise begining address of working numerator with address of first non-zero qword
 00000484  48/ 8D 0C 25						LEA				RCX, [ 9 ]
	   00000009
 0000048C  66| 2B C8						SUB				CX, AX
 0000048F  66| 89 8D						MOV				mDim, CX
	   FFFFFD8E
 00000496  66| 89 85						MOV				mIdx, AX							; mIdx after normalize
	   FFFFFD92
 0000049D  66| 89 85						MOV				jIdx, AX							; loop counter (Nr words in denominator)
	   FFFFFD94
 000004A4  66| 3B 8D						CMP				CX, nDim 
	   FFFFFD8C
 000004AB  0F 8C 00000159					JL				numtoremain							; if dimension M (dividend) is less than dimension N (divisor), exit with result zero
 000004B1  48/ 0F B7 85						MOVZX			RAX, nIdx							; first word of divisor
	   FFFFFD90
 000004B9  48/ 8B 84 C5						MOV				RAX, normdivisor [ RAX * 8 ]
	   FFFFFE00
 000004C1  48/ 89 85						MOV				nDiv, RAX							; save and re-use first qword of divisor (used each time to determine qhat)
	   FFFFFDA8
 000004C8  4C/ 8D A5						LEA				R12, currnumerator [ 7 * 8 ]
	   FFFFFF38

				;			Step D3: Calculate  q^
 000004CF			D3:
 000004CF  48/ 0F B7 8D						MOVZX			RCX, jIdx
	   FFFFFD94
 000004D7  49/ 8B 14 CC						MOV				RDX, Q_PTR [ R12 ] [ RCX * 8 ]
 000004DB  48/ FF C1						INC				RCX
 000004DE  49/ 8B 04 CC						MOV				RAX, Q_PTR [ R12 ] [ RCX * 8 ]
 000004E2  48/ F7 B5						DIV				nDiv
	   FFFFFDA8
 000004E9  48/ 89 85						MOV				qHat, RAX
	   FFFFFDB8
 000004F0  48/ 89 95						MOV				rHat, RDX
	   FFFFFDB0

				;			Step D4: Multiply trial quotient digit by full normalized divisor, then subtract from working copy of numerator (tricky alignment issues)
 000004F7			D4:
 000004F7  48/ 8D 8D						LEA				RCX, qdiv
	   FFFFFE80
								Zero512			RCX
			     1		IF		__UseZ
			     1					CheckAlign		RCX
			     2					LOCAL			ok
			     2		IF	__CheckAlign
			     2					TEST			RCX, 63							; Is specified param aligned 64?
			     2					JZ				??001A									; Yes, passes test, continue
			     2					INT				13									; No? fails, break (can substitute other exception handling)
			     2	??001A:
			     2		ENDIF
 000004FE  62 01 85 40/ EF   1					VPXORQ			ZMM31, ZMM31, ZMM31
	   FF
 00000504  62 61 FD 48/ 7F   1					VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
			     1		ELSEIF	__UseY
			     1					CheckAlign		RCX
			     1					VPXORQ			YMM4, YMM4, YMM4
			     1					FOR				idx, < 0, 4 >
			     1					VMOVDQA64		YM_PTR [ RCX ] [ idx * 8 ], YMM4
			     1					ENDM
			     1		ELSEIF	__UseX
			     1					CheckAlign		RCX
			     1					PXOR			XMM4, XMM4
			     1					FOR				idx, < 0, 2, 4, 6 >
			     1					MOVDQA			XM_PTR [ RCX ] [ idx * 8 ], XMM4
			     1					ENDM		
			     1		ELSE
			     1					XOR				RAX, RAX
			     1					FOR				idx,  < 0, 1, 2, 3, 4, 5, 6, 7 >
			     1					MOV				Q_PTR [ RCX ] [ idx * 8 ], RAX
			     1					ENDM
			     1		ENDIF
 0000050A  48/ 8D 8D						LEA				RCX, qdiv [ 8 * 8 ]					; qdiv is 16 qwords. Last eight are answer
	   FFFFFEC0
 00000511  48/ 8D 95						LEA				RDX, qdiv [ 7 * 8 ]					; Nr 7 will be overflow (if any)
	   FFFFFEB8
 00000518  4C/ 8D 85						LEA				R8, normdivisor						; the normalized 8 qword divisor
	   FFFFFE00
 0000051F  4C/ 8B 8D						MOV				R9, qHat							; times qhat
	   FFFFFDB8
 00000526  E8 FFFFFD02						CALL			mult_uT64							; multiply divisor by trial quotient digit (qHat)

						; a little intricate here: 	Need the starting address of the two operands, the shorter of the two (remaining) lengths
						; expaining the intricacies: the leading digit of the multiplied number needs to line up with the leading digit of the enumerator @ [ R12 ]
						; the multiply may have added a digit (a qword). The added digit may be in the answer, or may be in the overflow
						; subtract the result of the multiply from the remaining (current) numerator
						;
						;
						; notes
						;
						; leasst significsat (last) qwords of qdiv get subtracted from qwords of currnumerator offset by jIdx
						; nr words of qdiv is variable. nr words of currnumerator is variable, 
						; jIdx offset may cause truncated subtract
						;
						; so: need len (nr words) of qdiv (qlen); need jidx, need lesser of (8 - jidx) and len of qdiv (sublen), need diff between len of qdiv and sublen (truncoffset)
						;
						;	qidx = 7
						;	cidx = jidx + sublen
						; loop:>
						;	sub with borrow qdiv [ qidx - truncoffset ] from currnumerator [ cidx ]
						;	dec qidx, cidx
						;	dec sublen
						;	jnz loop

				;			Step D5: Test remainder
 0000052B			D5:
 0000052B  48/ 0F B7 85						MOVZX			RAX, jIdx
	   FFFFFD94
 00000533  48/ 8B 8D						MOV				RCX, qHat
	   FFFFFDB8
 0000053A  48/ 89 8C C5						MOV				quotient [ RAX * 8 ], RCX			; Set quotient digit [ j ] 
	   FFFFFE40
 00000542  73 37						JNC				D7									; Carry (from above) indicates result of subtract went negative, need D6 add back, else on to D7

				;			Step D6: Add Back
 00000544			D6:
 00000544  48/ FF 8C C5						DEC				quotient [ RAX * 8 ]				; adjust quotient digit
	   FFFFFE40
 0000054C  48/ 8B 95						MOV				RDX, addbackRDX						; restore same indexes / counters used in subtract for add back
	   FFFFFDA0
 00000553  4C/ 8B 95						MOV				R10, addbackR11
	   FFFFFD98
 0000055A  F8							CLC													; Carry indicator
 0000055B			@@:
 0000055B  49/ 8B 04 D3						MOV				RAX, Q_PTR [ R11 ] [ RDX * 8 ]
 0000055F  49/ 8D 4C 24						LEA				RCX, Q_PTR [ R12 ] [ 1 * 8 ]
	   08
 00000564  48/ 11 04 D1						ADC				Q_PTR [ RCX ] [ RDX * 8 ], RAX
 00000568  48/ FF CA						DEC				RDX
 0000056B  49/ FF CA						DEC				R10
 0000056E  79 EB						JNS				@B
 00000570  48/ 8B 85						MOV				RAX, qdiv [ 7 * 8 ]
	   FFFFFEB8
 00000577  49/ 11 04 D4						ADC				Q_PTR [ R12 ] [ RDX * 8 ], RAX

				;			Step D7: Loop on j
 0000057B			D7:
 0000057B  66| FF 85						INC				jIdx								; increase loop counter
	   FFFFFD94
 00000582  66| 83 BD						CMP				jIdx, 8								; done?
	   FFFFFD94 08
 0000058A  0F 8E FFFFFF3F					JLE				D3									; no, loop to D3

				;			Step D8: Un Normalize:
 00000590			D8UnNormalize:
 00000590  48/ 8B 8D						MOV				RCX, savedRDX						; reduced working numerator is now the remainder
	   FFFFFDF0
 00000597  48/ 8D 95						LEA				RDX, currnumerator [ 8 * 8 ]		; shifted result to callers remainder
	   FFFFFF40
 0000059E  66| 44/ 8B 85					MOV				R8W, normf
	   FFFFFD96
 000005A6  E8 00000000 E					CALL			shr_u
								;
 000005AB  48/ 8B 8D						MOV				RCX, savedRCX						; copy working quotient to callers quotient
	   FFFFFDF8
 000005B2  48/ 8D 95						LEA				RDX, quotient
	   FFFFFE40
								Copy512			RCX, RDX
			     1		IF		__UseZ 
			     1					CheckAlign		RCX
			     2					LOCAL			ok
			     2		IF	__CheckAlign
			     2					TEST			RCX, 63							; Is specified param aligned 64?
			     2					JZ				??001B									; Yes, passes test, continue
			     2					INT				13									; No? fails, break (can substitute other exception handling)
			     2	??001B:
			     2		ENDIF
			     1					CheckAlign		RDX
			     2					LOCAL			ok
			     2		IF	__CheckAlign
			     2					TEST			RDX, 63							; Is specified param aligned 64?
			     2					JZ				??001C									; Yes, passes test, continue
			     2					INT				13									; No? fails, break (can substitute other exception handling)
			     2	??001C:
			     2		ENDIF
 000005B9  62 61 FD 48/ 6F   1					VMOVDQA64		ZMM31, ZM_PTR [ RDX ]
	   3A
 000005BF  62 61 FD 48/ 7F   1					VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
			     1		ELSEIF	__UseY
			     1					CheckAlign		RCX
			     1					CheckAlign		RDX
			     1					VMOVDQA64		YMM4, YM_PTR [ RDX + 0 * 8 ]
			     1					VMOVDQA64		YM_PTR [ RCX ] [ 0 * 8 ], YMM4	; alternate ymm regs in case pipeline can execute next without waiting for this.
			     1					VMOVDQA64		YMM5, YM_PTR [ RDX ] [ 4 * 8 ]
			     1					VMOVDQA64		YM_PTR [ RCX ] [ 4 * 8 ], YMM5
			     1		ELSEIF	__UseX
			     1					CheckAlign		RCX
			     1					CheckAlign		RDX
			     1					MOVDQA			XMM4, XM_PTR [ RDX ] [ 0 * 8 ]
			     1					MOVDQA			XM_PTR [ RCX ] [ 0 * 8 ], XMM4
			     1					MOVDQA			XMM3, XM_PTR [ RDX ] [ 2 * 8 ]
			     1					MOVDQA			XM_PTR [ RCX ] [ 2 * 8 ], XMM3
			     1					MOVDQA			XMM4, XM_PTR [ RDX ] [ 4 * 8 ]
			     1					MOVDQA			XM_PTR [ RCX ] [ 4 * 8 ], XMM4
			     1					MOVDQA			XMM3, XM_PTR [ RDX ] [ 6 * 8 ]
			     1					MOVDQA			XM_PTR [ RCX ] [ 6 * 8 ], XMM3
			     1		ELSE
			     1					FOR				idx, < 0, 1, 2, 3, 4, 5, 6, 7 >
			     1					MOV				RAX, Q_PTR [ RDX ] [ idx * 8 ]
			     1					MOV				Q_PTR [ RCX ] [ idx * 8 ], RAX
			     1					ENDM
			     1		ENDIF
 000005C5			cleanupret:
 000005C5  48/ 33 C0						XOR				RAX, RAX							; return zero
 000005C8			cleanupwretcode:
 000005C8  4C/ 8B A5						MOV				R12, savedR12
	   FFFFFDC8
 000005CF  4C/ 8B 9D						MOV				R11, savedR11
	   FFFFFDD0
 000005D6  4C/ 8B 95						MOV				R10, savedR10
	   FFFFFDD8
 000005DD  4C/ 8B 8D						MOV				R9,  savedR9
	   FFFFFDE0
 000005E4  4C/ 8B 85						MOV				R8,  savedR8
	   FFFFFDE8
 000005EB  48/ 8B 95						MOV				RDX, savedRDX
	   FFFFFDF0
 000005F2  48/ 8B 8D						MOV				RCX, savedRCX						; restore parameter registers back to "as-called" values
	   FFFFFDF8
								ReleaseFrame	savedRBP
			     1	;			release memory set up by createframe macro
			     1	;			restores RSP, and RBP to as-called values
			     1	;			after these instructions are executed, LOCAL variables can NOT be accessed
			     1	;			This needs to be done to restore the stack correctly, but can be done only once
			     1	;			Strongly suggest doing this just prior to return instruction, and that there is only one return instruction from the PROC
 000005F9  48/ 8B A5	     1					MOV				RSP, savedRBP					; restore unadjusted / unrounded (the as when called) stack pointer (eliminating LOCAL storage) 
	   FFFFFDC0
 00000600  5D		     1					POP				RBP									; restore base pointer for caller
								RET
 00000601  C3		   *	    ret    00000h
 00000602			divbyzero:
 00000602  8B 05 00000054 R					MOV				EAX, ret_minus_1
 00000608  EB BE						JMP				cleanupwretcode

 0000060A  4C/ 8B 85		numtoremain:	MOV				R8, savedR8
	   FFFFFDE8
 00000611  48/ 8B 95						MOV				RDX, savedRDX
	   FFFFFDF0
								Copy512			RDX, R8
			     1		IF		__UseZ 
			     1					CheckAlign		RDX
			     2					LOCAL			ok
			     2		IF	__CheckAlign
			     2					TEST			RDX, 63							; Is specified param aligned 64?
			     2					JZ				??001D									; Yes, passes test, continue
			     2					INT				13									; No? fails, break (can substitute other exception handling)
			     2	??001D:
			     2		ENDIF
			     1					CheckAlign		R8
			     2					LOCAL			ok
			     2		IF	__CheckAlign
			     2					TEST			R8, 63							; Is specified param aligned 64?
			     2					JZ				??001E									; Yes, passes test, continue
			     2					INT				13									; No? fails, break (can substitute other exception handling)
			     2	??001E:
			     2		ENDIF
 00000618  62 41 FD 48/ 6F   1					VMOVDQA64		ZMM31, ZM_PTR [ R8 ]
	   38
 0000061E  62 61 FD 48/ 7F   1					VMOVDQA64		ZM_PTR [ RDX ], ZMM31
	   3A
			     1		ELSEIF	__UseY
			     1					CheckAlign		RDX
			     1					CheckAlign		R8
			     1					VMOVDQA64		YMM4, YM_PTR [ R8 + 0 * 8 ]
			     1					VMOVDQA64		YM_PTR [ RDX ] [ 0 * 8 ], YMM4	; alternate ymm regs in case pipeline can execute next without waiting for this.
			     1					VMOVDQA64		YMM5, YM_PTR [ R8 ] [ 4 * 8 ]
			     1					VMOVDQA64		YM_PTR [ RDX ] [ 4 * 8 ], YMM5
			     1		ELSEIF	__UseX
			     1					CheckAlign		RDX
			     1					CheckAlign		R8
			     1					MOVDQA			XMM4, XM_PTR [ R8 ] [ 0 * 8 ]
			     1					MOVDQA			XM_PTR [ RDX ] [ 0 * 8 ], XMM4
			     1					MOVDQA			XMM3, XM_PTR [ R8 ] [ 2 * 8 ]
			     1					MOVDQA			XM_PTR [ RDX ] [ 2 * 8 ], XMM3
			     1					MOVDQA			XMM4, XM_PTR [ R8 ] [ 4 * 8 ]
			     1					MOVDQA			XM_PTR [ RDX ] [ 4 * 8 ], XMM4
			     1					MOVDQA			XMM3, XM_PTR [ R8 ] [ 6 * 8 ]
			     1					MOVDQA			XM_PTR [ RDX ] [ 6 * 8 ], XMM3
			     1		ELSE
			     1					FOR				idx, < 0, 1, 2, 3, 4, 5, 6, 7 >
			     1					MOV				RAX, Q_PTR [ R8 ] [ idx * 8 ]
			     1					MOV				Q_PTR [ RDX ] [ idx * 8 ], RAX
			     1					ENDM
			     1		ENDIF
 00000624  EB 9F						JMP				cleanupret
				; subroutine (called) to subtract n digits at [RCX] from [RDX] count of digits in R8
 00000626  F8			@sub:			CLC
 00000627  4D/ 85 C0		@@:				TEST			R8,  R8
 0000062A  74 0D						JZ				@e1
 0000062C  4A/ 8B 04 C1						MOV				RAX, Q_PTR [ RCX ] [ R8 * 8 ]
 00000630  4A/ 19 04 C2						SBB				Q_PTR [ RDX ] [ R8 * 8 ], RAX
 00000634  49/ FF C8						DEC				R8
 00000637  EB EE						JMP				@B
 00000639			@e1:			RET
 00000639  C3		   *	    ret    00000h

				; subroutine (called) to add (back) n digits at [RCX] to [RDX] count of digits in R8
 0000063A  F8			@addback:		CLC
 0000063B  4D/ 85 C0		@@:				TEST			R8, R8
 0000063E  74 0D						JZ				@e2
 00000640  4A/ 8B 04 C1						MOV				RAX, Q_PTR [ RCX ] [ R8 * 8 ]
 00000644  4A/ 11 04 C2						ADC				Q_PTR [ RDX ] [ R8 * 8 ], RAX
 00000648  49/ FF C8						DEC				R8
 0000064B  EB EE						JMP				@B
 0000064D			@e2:			RET
 0000064D  C3		   *	    ret    00000h

 0000064E			div_u			ENDP

				;
				;--------------------------------------------------------------------------------------------------------------------------------------------------------------
				;			EXTERNDEF		div_uT64:PROC				; s16 div_uT64( u64* quotient, u64* remainder, u64* dividend, u64 divisor)
				;			div_uT64		-	divide 512 bit dividend by 64 bit divisor, giving 512 bit quotient and 64 bit remainder
				;			Prototype:		-	s16 div_u( u64* quotient, u64* remainder, u64* dividend, u64 divisor);
				;			quotient		-	Address of 8 QWORDS to store resulting quotient (in RCX)
				;			remainder		-	Address of QWORD for resulting remainder (in RDX)
				;			dividend		-	Address of 8 QWORDS dividend (in R8)
				;			divisor			-	Value of 64 bit divisor (in R9)
				;			returns			-	0 for success, -1 for attempt to divide by zero
				;
				;			Regs with contents destroyed, not restored: RAX, RDX, R10 (each considered volitile, but caller might optimize on other regs)

								OPTION			PROLOGUE:none
								OPTION			EPILOGUE:none
 0000064E			div_uT64		PROC			PUBLIC

								CheckAlign		RCX									; (out) Quotient
			     1					LOCAL			ok
			     1		IF	__CheckAlign
			     1					TEST			RCX, 63							; Is specified param aligned 64?
			     1					JZ				??001F									; Yes, passes test, continue
			     1					INT				13									; No? fails, break (can substitute other exception handling)
			     1	??001F:
			     1		ENDIF
								CheckAlign		R8									; (in) Dividend
			     1					LOCAL			ok
			     1		IF	__CheckAlign
			     1					TEST			R8, 63							; Is specified param aligned 64?
			     1					JZ				??0020									; Yes, passes test, continue
			     1					INT				13									; No? fails, break (can substitute other exception handling)
			     1	??0020:
			     1		ENDIF

				; Test divisor for divide by zero				
 0000064E  4D/ 85 C9						TEST			R9, R9
 00000651  74 63						JZ				@@DivByZero

				; DIV instruction (64-bit) uses RAX and RDX. Need to move RDX (addr of remainder) out of the way; start it off with zero
 00000653  4C/ 8B D2						MOV				R10, RDX
 00000656  48/ 33 D2						XOR				RDX, RDX

				; FOR EACH index of 0 thru 7: get qword of dividend, divide by divisor, store qword of quotient
								FOR				idx, < 0, 1, 2, 3, 4, 5, 6, 7 >
								MOV				RAX, Q_PTR [ R8 ] [ idx * 8 ]		; dividend [ idx ] -> RAX
								DIV				R9									; divide by divisor in R9 (as passed)
								MOV				Q_PTR [ RCX ] [ idx * 8 ], RAX		; quotient [ idx ] <- RAX ; Note: remainder in RDX for next divide
								ENDM
 00000659  49/ 8B 00	     1					MOV				RAX, Q_PTR [ R8 ] [ 0 * 8 ]		; dividend [ idx ] -> RAX
 0000065C  49/ F7 F1	     1					DIV				R9									; divide by divisor in R9 (as passed)
 0000065F  48/ 89 01	     1					MOV				Q_PTR [ RCX ] [ 0 * 8 ], RAX		; quotient [ idx ] <- RAX ; Note: remainder in RDX for next divide
 00000662  49/ 8B 40 08	     1					MOV				RAX, Q_PTR [ R8 ] [ 1 * 8 ]		; dividend [ idx ] -> RAX
 00000666  49/ F7 F1	     1					DIV				R9									; divide by divisor in R9 (as passed)
 00000669  48/ 89 41 08	     1					MOV				Q_PTR [ RCX ] [ 1 * 8 ], RAX		; quotient [ idx ] <- RAX ; Note: remainder in RDX for next divide
 0000066D  49/ 8B 40 10	     1					MOV				RAX, Q_PTR [ R8 ] [ 2 * 8 ]		; dividend [ idx ] -> RAX
 00000671  49/ F7 F1	     1					DIV				R9									; divide by divisor in R9 (as passed)
 00000674  48/ 89 41 10	     1					MOV				Q_PTR [ RCX ] [ 2 * 8 ], RAX		; quotient [ idx ] <- RAX ; Note: remainder in RDX for next divide
 00000678  49/ 8B 40 18	     1					MOV				RAX, Q_PTR [ R8 ] [ 3 * 8 ]		; dividend [ idx ] -> RAX
 0000067C  49/ F7 F1	     1					DIV				R9									; divide by divisor in R9 (as passed)
 0000067F  48/ 89 41 18	     1					MOV				Q_PTR [ RCX ] [ 3 * 8 ], RAX		; quotient [ idx ] <- RAX ; Note: remainder in RDX for next divide
 00000683  49/ 8B 40 20	     1					MOV				RAX, Q_PTR [ R8 ] [ 4 * 8 ]		; dividend [ idx ] -> RAX
 00000687  49/ F7 F1	     1					DIV				R9									; divide by divisor in R9 (as passed)
 0000068A  48/ 89 41 20	     1					MOV				Q_PTR [ RCX ] [ 4 * 8 ], RAX		; quotient [ idx ] <- RAX ; Note: remainder in RDX for next divide
 0000068E  49/ 8B 40 28	     1					MOV				RAX, Q_PTR [ R8 ] [ 5 * 8 ]		; dividend [ idx ] -> RAX
 00000692  49/ F7 F1	     1					DIV				R9									; divide by divisor in R9 (as passed)
 00000695  48/ 89 41 28	     1					MOV				Q_PTR [ RCX ] [ 5 * 8 ], RAX		; quotient [ idx ] <- RAX ; Note: remainder in RDX for next divide
 00000699  49/ 8B 40 30	     1					MOV				RAX, Q_PTR [ R8 ] [ 6 * 8 ]		; dividend [ idx ] -> RAX
 0000069D  49/ F7 F1	     1					DIV				R9									; divide by divisor in R9 (as passed)
 000006A0  48/ 89 41 30	     1					MOV				Q_PTR [ RCX ] [ 6 * 8 ], RAX		; quotient [ idx ] <- RAX ; Note: remainder in RDX for next divide
 000006A4  49/ 8B 40 38	     1					MOV				RAX, Q_PTR [ R8 ] [ 7 * 8 ]		; dividend [ idx ] -> RAX
 000006A8  49/ F7 F1	     1					DIV				R9									; divide by divisor in R9 (as passed)
 000006AB  48/ 89 41 38	     1					MOV				Q_PTR [ RCX ] [ 7 * 8 ], RAX		; quotient [ idx ] <- RAX ; Note: remainder in RDX for next divide

				; Last (least significant qword) divide leaves a remainder, store it at callers remainder
 000006AF  49/ 89 12						MOV				Q_PTR [ R10 ], RDX					; remainder to callers remainder
 000006B2  48/ 33 C0						XOR				RAX, RAX							; return zero
 000006B5			@@exit:			
 000006B5  C3							RET

				; Exception handling, divide by zero
 000006B6			@@DivByZero:
								Zero512			RCX									; Divide by Zero. Could throw fault, but returning zero quotient, zero remainder
			     1		IF		__UseZ
			     1					CheckAlign		RCX
			     2					LOCAL			ok
			     2		IF	__CheckAlign
			     2					TEST			RCX, 63							; Is specified param aligned 64?
			     2					JZ				??0021									; Yes, passes test, continue
			     2					INT				13									; No? fails, break (can substitute other exception handling)
			     2	??0021:
			     2		ENDIF
 000006B6  62 01 85 40/ EF   1					VPXORQ			ZMM31, ZMM31, ZMM31
	   FF
 000006BC  62 61 FD 48/ 7F   1					VMOVDQA64		ZM_PTR [ RCX ], ZMM31
	   39
			     1		ELSEIF	__UseY
			     1					CheckAlign		RCX
			     1					VPXORQ			YMM4, YMM4, YMM4
			     1					FOR				idx, < 0, 4 >
			     1					VMOVDQA64		YM_PTR [ RCX ] [ idx * 8 ], YMM4
			     1					ENDM
			     1		ELSEIF	__UseX
			     1					CheckAlign		RCX
			     1					PXOR			XMM4, XMM4
			     1					FOR				idx, < 0, 2, 4, 6 >
			     1					MOVDQA			XM_PTR [ RCX ] [ idx * 8 ], XMM4
			     1					ENDM		
			     1		ELSE
			     1					XOR				RAX, RAX
			     1					FOR				idx,  < 0, 1, 2, 3, 4, 5, 6, 7 >
			     1					MOV				Q_PTR [ RCX ] [ idx * 8 ], RAX
			     1					ENDM
			     1		ENDIF
 000006C2  48/ 33 C0						XOR				RAX, RAX
 000006C5  49/ 89 02						MOV				Q_PTR [ R10 ] , RAX
 000006C8  FF C8						DEC				EAX									; return error (div by zero)
 000006CA  EB E9						JMP				@@exit
 000006CC			div_uT64		ENDP

								END
Microsoft (R) Macro Assembler (x64) Version 14.44.35214.0   08/20/25 23:44:52
ui512md.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

CheckAlign . . . . . . . . . . .	Proc
Copy512Q . . . . . . . . . . . .	Proc
Copy512  . . . . . . . . . . . .	Proc
CreateFrame  . . . . . . . . . .	Proc
Leaf_End . . . . . . . . . . . .	Proc
Leaf_Entry . . . . . . . . . . .	Proc
MemConstants . . . . . . . . . .	Proc
ReleaseFrame . . . . . . . . . .	Proc
VerifyRegs . . . . . . . . . . .	Proc
Zero512Q . . . . . . . . . . . .	Proc
Zero512  . . . . . . . . . . . .	Proc


Records:

                N a m e                  Width     # fields
                                         Shift     Width     Mask      Initial

kMask  . . . . . . . . . . . . .	 00000009      00000009
  b8 . . . . . . . . . . . . . .	 00000008      00000001	     0100     ?
  b7 . . . . . . . . . . . . . .	 00000007      00000001	     0080     ?
  b6 . . . . . . . . . . . . . .	 00000006      00000001	     0040     ?
  b5 . . . . . . . . . . . . . .	 00000005      00000001	     0020     ?
  b4 . . . . . . . . . . . . . .	 00000004      00000001	     0010     ?
  b3 . . . . . . . . . . . . . .	 00000003      00000001	     0008     ?
  b2 . . . . . . . . . . . . . .	 00000002      00000001	     0004     ?
  b1 . . . . . . . . . . . . . .	 00000001      00000001	     0002     ?
  b0 . . . . . . . . . . . . . .	 00000000      00000001	     0001     ?


Types:

                N a m e                  Size     Attr

LPVOID . . . . . . . . . . . . .	 00000008     PTR VOID


Segments:

                N a m e                  Length   Align   Class

ui512md  . . . . . . . . . . . .	 000006CC 16	  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

div_uT64 . . . . . . . . . . . .	P 	 0000064E ui512md	Length= 0000007E Public
  @@exit . . . . . . . . . . . .	L 	 000006B5 ui512md	
  @@DivByZero  . . . . . . . . .	L 	 000006B6 ui512md	
div_u  . . . . . . . . . . . . .	P 	 000002D8 ui512md	Length= 00000376 Public
  padding1 . . . . . . . . . . .	QWord	 rbp - 00000080
  currnumerator  . . . . . . . .	QWord	 rbp - 00000100
  qdiv . . . . . . . . . . . . .	QWord	 rbp - 00000180
  quotient . . . . . . . . . . .	QWord	 rbp - 000001C0
  normdivisor  . . . . . . . . .	QWord	 rbp - 00000200
  savedRCX . . . . . . . . . . .	QWord	 rbp - 00000208
  savedRDX . . . . . . . . . . .	QWord	 rbp - 00000210
  savedR8  . . . . . . . . . . .	QWord	 rbp - 00000218
  savedR9  . . . . . . . . . . .	QWord	 rbp - 00000220
  savedR10 . . . . . . . . . . .	QWord	 rbp - 00000228
  savedR11 . . . . . . . . . . .	QWord	 rbp - 00000230
  savedR12 . . . . . . . . . . .	QWord	 rbp - 00000238
  savedRBP . . . . . . . . . . .	QWord	 rbp - 00000240
  qHat . . . . . . . . . . . . .	QWord	 rbp - 00000248
  rHat . . . . . . . . . . . . .	QWord	 rbp - 00000250
  nDiv . . . . . . . . . . . . .	QWord	 rbp - 00000258
  addbackRDX . . . . . . . . . .	QWord	 rbp - 00000260
  addbackR11 . . . . . . . . . .	QWord	 rbp - 00000268
  normf  . . . . . . . . . . . .	Word	 rbp - 0000026A
  jIdx . . . . . . . . . . . . .	Word	 rbp - 0000026C
  mIdx . . . . . . . . . . . . .	Word	 rbp - 0000026E
  nIdx . . . . . . . . . . . . .	Word	 rbp - 00000270
  mDim . . . . . . . . . . . . .	Word	 rbp - 00000272
  nDim . . . . . . . . . . . . .	Word	 rbp - 00000274
  padding2 . . . . . . . . . . .	QWord	 rbp - 000002F4
  mbynDiv  . . . . . . . . . . .	L 	 000003B2 ui512md	
  D3 . . . . . . . . . . . . . .	L 	 000004CF ui512md	
  D4 . . . . . . . . . . . . . .	L 	 000004F7 ui512md	
  D5 . . . . . . . . . . . . . .	L 	 0000052B ui512md	
  D6 . . . . . . . . . . . . . .	L 	 00000544 ui512md	
  D7 . . . . . . . . . . . . . .	L 	 0000057B ui512md	
  D8UnNormalize  . . . . . . . .	L 	 00000590 ui512md	
  cleanupret . . . . . . . . . .	L 	 000005C5 ui512md	
  cleanupwretcode  . . . . . . .	L 	 000005C8 ui512md	
  divbyzero  . . . . . . . . . .	L 	 00000602 ui512md	
  numtoremain  . . . . . . . . .	L 	 0000060A ui512md	
  @sub . . . . . . . . . . . . .	L 	 00000626 ui512md	
  @e1  . . . . . . . . . . . . .	L 	 00000639 ui512md	
  @addback . . . . . . . . . . .	L 	 0000063A ui512md	
  @e2  . . . . . . . . . . . . .	L 	 0000064D ui512md	
mult_uT64  . . . . . . . . . . .	P 	 0000022D ui512md	Length= 000000AB Public
mult_u . . . . . . . . . . . . .	P 	 00000061 ui512md	Length= 000001CC Public
  padding1 . . . . . . . . . . .	QWord	 rbp - 00000040
  product  . . . . . . . . . . .	QWord	 rbp - 000000C0
  savedRBP . . . . . . . . . . .	QWord	 rbp - 000000C8
  savedRCX . . . . . . . . . . .	QWord	 rbp - 000000D0
  savedRDX . . . . . . . . . . .	QWord	 rbp - 000000D8
  savedR10 . . . . . . . . . . .	QWord	 rbp - 000000E0
  savedR11 . . . . . . . . . . .	QWord	 rbp - 000000E8
  savedR12 . . . . . . . . . . .	QWord	 rbp - 000000F0
  plierl . . . . . . . . . . . .	Word	 rbp - 000000F2
  candl  . . . . . . . . . . . .	Word	 rbp - 000000F4
  padding2 . . . . . . . . . . .	QWord	 rbp - 00000174
  @@multloop . . . . . . . . . .	L 	 00000136 ui512md	
  @@exit . . . . . . . . . . . .	L 	 000001BC ui512md	
  @@zeroandexit  . . . . . . . .	L 	 000001DD ui512md	
  @@copyandexit  . . . . . . . .	L 	 00000205 ui512md	


Symbols:

                N a m e                 Type     Value    Attr

B_PTR  . . . . . . . . . . . . .	Text   	 BYTE PTR
CPEQ . . . . . . . . . . . . . .	Number	 00000000h   
CPFALSE  . . . . . . . . . . . .	Number	 00000003h   
CPGE . . . . . . . . . . . . . .	Number	 00000005h   
CPGT . . . . . . . . . . . . . .	Number	 00000006h   
CPLE . . . . . . . . . . . . . .	Number	 00000002h   
CPLT . . . . . . . . . . . . . .	Number	 00000001h   
CPNE . . . . . . . . . . . . . .	Number	 00000004h   
CPTRUE . . . . . . . . . . . . .	Number	 00000007h   
D_PTR  . . . . . . . . . . . . .	Text   	 DWORD PTR
MaskBit0 . . . . . . . . . . . .	Number	 00000001h   
MaskBit1 . . . . . . . . . . . .	Number	 00000002h   
MaskBit2 . . . . . . . . . . . .	Number	 00000004h   
MaskBit3 . . . . . . . . . . . .	Number	 00000008h   
MaskBit4 . . . . . . . . . . . .	Number	 00000010h   
MaskBit5 . . . . . . . . . . . .	Number	 00000020h   
MaskBit6 . . . . . . . . . . . .	Number	 00000040h   
MaskBit7 . . . . . . . . . . . .	Number	 00000080h   
Q_PTR  . . . . . . . . . . . . .	Text   	 QWORD PTR
W_PTR  . . . . . . . . . . . . .	Text   	 WORD PTR
XM_PTR . . . . . . . . . . . . .	Text   	 XMMWORD PTR
YM_PTR . . . . . . . . . . . . .	Text   	 YMMWORD PTR
ZM_PTR . . . . . . . . . . . . .	Text   	 ZMMWORD PTR
__CheckAlign . . . . . . . . . .	Number	 00000000h   
__UseQ . . . . . . . . . . . . .	Number	 00000000h   
__UseX . . . . . . . . . . . . .	Number	 00000000h   
__UseY . . . . . . . . . . . . .	Number	 00000000h   
__UseZ . . . . . . . . . . . . .	Number	 00000001h   
__VerifyRegs . . . . . . . . . .	Number	 00000001h   
add_uT64 . . . . . . . . . . . .	L 	 00000000 External
add_u  . . . . . . . . . . . . .	L 	 00000000 External
and_u  . . . . . . . . . . . . .	L 	 00000000 External
compare_uT64 . . . . . . . . . .	L 	 00000000 External
compare_u  . . . . . . . . . . .	L 	 00000000 External
complie_time_options_INC . . . .	Text   	 1
copy_u . . . . . . . . . . . . .	L 	 00000000 External
div_oset . . . . . . . . . . . .	Text   	 padding2 + 64 - padding1
legalnotes . . . . . . . . . . .	Number	 00000001h   
lsb_u  . . . . . . . . . . . . .	L 	 00000000 External
m32BCST  . . . . . . . . . . . .	Text   	 DWORD BCST
m64BCST  . . . . . . . . . . . .	Text   	 QWORD BCST
msb_u  . . . . . . . . . . . . .	L 	 00000000 External
mskAll8  . . . . . . . . . . . .	Byte	 00000058 ui512md	
mskB0  . . . . . . . . . . . . .	Byte	 00000059 ui512md	
mskB1  . . . . . . . . . . . . .	Byte	 0000005A ui512md	
mskB2  . . . . . . . . . . . . .	Byte	 0000005B ui512md	
mskB3  . . . . . . . . . . . . .	Byte	 0000005C ui512md	
mskB4  . . . . . . . . . . . . .	Byte	 0000005D ui512md	
mskB5  . . . . . . . . . . . . .	Byte	 0000005E ui512md	
mskB6  . . . . . . . . . . . . .	Byte	 0000005F ui512md	
mskB7  . . . . . . . . . . . . .	Byte	 00000060 ui512md	
mskHex100  . . . . . . . . . . .	DWord	 00000048 ui512md	
mult_u_ofs . . . . . . . . . . .	Text   	 padding2 + 64 - padding1
not_u  . . . . . . . . . . . . .	L 	 00000000 External
or_u . . . . . . . . . . . . . .	L 	 00000000 External
qOnes  . . . . . . . . . . . . .	QWord	 00000000 ui512md	
reg_verify . . . . . . . . . . .	L 	 00000000 External
ret0 . . . . . . . . . . . . . .	DWord	 0000004C ui512md	
ret1 . . . . . . . . . . . . . .	DWord	 00000050 ui512md	
ret_minus_1  . . . . . . . . . .	DWord	 00000054 ui512md	
set_uT64 . . . . . . . . . . . .	L 	 00000000 External
shl_u  . . . . . . . . . . . . .	L 	 00000000 External
shr_u  . . . . . . . . . . . . .	L 	 00000000 External
sub_uT64 . . . . . . . . . . . .	L 	 00000000 External
sub_u  . . . . . . . . . . . . .	L 	 00000000 External
ui512aMacros_INC . . . . . . . .	Text   	 1
ui512bMacros_INC . . . . . . . .	Text   	 1
ui512mdMacros_INC  . . . . . . .	Text   	 1
xor_u  . . . . . . . . . . . . .	L 	 00000000 External
zeroQ  . . . . . . . . . . . . .	QWord	 00000040 ui512md	
zero_u . . . . . . . . . . . . .	L 	 00000000 External

	   0 Warnings
	   0 Errors
